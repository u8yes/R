v <- 5
w <- 10
v + w
print("Hello, R!!!") # ctrl+Enter
# R package 보기
dim(available.packages())
available.packages()
# 패키지 사용법
install.packages("stringr")
library("stringr") # 메모리에 로딩 : "" 생략 가능
search() # 패키지 메모리 로딩 확인
# 패키지 제거
remove.packages("stringr")
search() # 패키지 메모리 로딩 확인
search() # 패키지 메모리 로딩 확인
# R session 보기
sessionInfo()
# 데이터 셋 보기
data()
# 데이터 셋 보기
data()
# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# chap01_Basic : 주석문 기호
##############################
#  Chapter01. R 설치와 개요
##############################
# 주요 단축키
# - script 실행 : ctrl+Enter, ctrl+R
# - script 저장 : ctrl+s(현재 파일), ctrl+sht+s(전체파일저장)
# Library 등록.
# - C:/Program Files/R/R-4.1.2/etc/Rprofile.site 파일에 .libPaths("C:/myRLib/Library") 추가 혹은
# - 사용자 변수 새로 만들기 : 변수 이름 -> R_LIBS, 변수 값 : C:\Users\user\Documents\R\win-library\4.1 으로 셋팅.
print("Hello, R!!!") # ctrl+Enter
## 패키지와 Session 보기
# R package 보기
dim(available.packages()) # 18688    17
available.packages()
# 패키지 사용법
install.packages("stringr") # 패키지 설치
library("stringr") # 메모리에 로딩 : "" 생략 가능
search() # 패키지 메모리 로딩 확인
# 패키지 제거
remove.packages("stringr")
# R session 보기
sessionInfo()
# R session 보기
sessionInfo()
print("Hello, R!!!") # ctrl+Enter
# R package 보기
dim(available.packages()) # 18688    17
available.packages()
# 패키지 사용법
install.packages("stringr") # 패키지 설치
install.packages("stringr")
library("stringr") # 메모리에 로딩 : "" 생략 가능
search() # 패키지 메모리 로딩 확인
# 패키지 제거
remove.packages("stringr")
# R session 보기
sessionInfo()
# 패키지 사용법
install.packages("stringr") # 패키지 설치
install.packages("stringr")
library("stringr") # 메모리에 로딩 : "" 생략 가능
search() # 패키지 메모리 로딩 확인
# R session 보기
sessionInfo()
# 데이터 셋 보기
data()
# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# 단계2 : 밀도(density)를 기준으로 히스토그램 그리기
hist(Nile, freq = F)
?hist
# 단계3 : 단계2의 결과에 분포곡선(line)을 추가
lines(density(Nile))
par(mfrow=c(1, 1)) # plots 영역에 1개 그래프 표시
pdf("C:/workspaces/Rwork/output/batch.pdf")
hist(rnorm(20))
dev.off()
## 4. 변수와 자료형
# 변수 사용 예
age <- 25
age
name <- "홍길동"
name
# 변수.멤버  형태로 변수 선언 예
var1 <- 50
var2 <- 100
# 자료형
int <- 20    # 숫자형(정수)
double <- 3.14 # 숫자형(실수)
string <- "홍길동"  # 문자형
boolean <- TRUE  # 진리값 : TRUE(T) / FALSE(F)
boolean
boolean <- True  # 진리값 : TRUE(T) / FALSE(F)
boolean
boolean <- 3.14
boolean
# 자료형
int <- 20    # 숫자형(정수)
double <- 3.14 # 숫자형(실수)
string <- "홍길동"  # 문자형
boolean <- TRUE  # 진리값 : TRUE(T) / FALSE(F)
boolean
boolean <- 3.14
boolean
# 자료형 확인
is.numeric(int)
is.integer(int)
is.double(int)
castInt <- as.integer(int)
is.integer(castInt)
is.numeric(double)
is.double(double)
is.character(string)
is.character(double)
is.character("double")
# 문자 원소를 숫자 원소로 형변환
x <- c(1, 2, 3)
x
# 숫자 원소를 문자 원소로 형변환
y <- c(1, 2, "3")
y
result <- x * 3
result
y
result <- y * 5
result <- as.integer(y) * 5
result
# 복소수형 자료 생성과 형변환
z <- 5.3 - 3i
Re(z)
Im(z)
is.complex(z) # TRUE
as.complex(5.3) # 5.3+0i
# 스칼라 변수의 자료형
mode(int)
mode(string)
mode(boolean)
boolean <- TRUE  # 진리값 : TRUE(T) / FALSE(F)
boolean
mode(boolean)
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
mode(gender)
class(gender)
plot(gender)
# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender)
Ngender
table(Ngender)
# Factor형 변수로 차트 그리기
plot(Ngender)
mode(Ngender)
class(Ngender)
is.factor(Ngender)
# Factor Nominal 변수
Ngender
# Factor Nominal 변수
Ngender
?hist
# factor() 함수 이용 Factor형 변환
args(factor)
?factor
# 도움말 보기
i <- sum(1, 2, 3)
# factor() 함수 이용 Factor형 변환
args(factor)
Ogender<- factor(gender, levels = c('woman', 'man'), labels = c("여자", "남자"), ordered = T)
Ogender
# 순서 없는 요인과 순서 있는 요인형 변수로 차트 그리기
par(mfrow=c(1,2))
plot(Ngender)
plot(Ogender)
# 도움말 보기
i <- sum(1, 2, 3)
i
help(sum)
?sum
# 함수 파라메터 보기
args(sum)
# 함수 사용 예제 보기
example(sum)
# 작업 공간 지정
getwd()
setwd("C:/workspaces/Rwork/data")
# 작업 공간 지정
getwd()
# 패키지 사용법
install.packages("stringr") # 패키지 설치
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2, 3, 4, 5) # combine 함수
x
x <- c(1:20) # 콜론 : 범위
x
y <- 10:20
y
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2.5, 3, 4, 5) # combine 함수
x
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2, 3, 4, 5) # combine 함수
x
x <- c(1:20) # 콜론 : 범위
x
y <- 10:20
y
##  - seq() 함수 이용 벡터 객체 생성
x <- seq(1, 10, 2) # sequence(시작, 종료, 증감)
x
##  - rep() 함수 이용 벡터 객체 생성
help(rep) # ?rep
rep(1:3, 3) # replicate(대상, 반복수)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x
y
x; y
union(x, y)     # 합집합(x+y)
setdiff(x, y)   # 차집합(x-y)
intersect(x, y) # 교집합(x^y)
# 숫자형, 문자형, 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v2 <- c(33, -5, 20:23, 12, "4") # 데이터를 모두 문자형으로 변환.
v2
# 한 줄에 명령문 중복 사용
v1; mode(v1)
v2; mode(v2)
age
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순신", "강감찬")
age
x <- c(1:200) # 콜론 : 범위
x
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순신", "강감찬")
age
age <- NULL # age 변수 데이터 삭제
age
# 벡터 자료 참조하기
a <- c(1:50)
a
a[9]
a[c(10:45)]
a[c(10, 20, 30, 40)]
a[10:(length(a)-5)]
# 잘못된 벡터 첨자 사용 예
a
# 잘못된 벡터 첨자 사용 예
a[5, 10]
# c() 함수에서 콤마 사용 예
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v1[1]
v1[c(2, 6)]
v1[3:5]
v1[c(4, 5:8, 9)]
# 음수 값으로 첨자 지정 예
v1[-1]
v1[-c(2, 4)]
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
library(RSADBE)            # 패키지를 메모리에 로드
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 2. Matrix 자료 구조
args(matrix)
# matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
m <- matrix(c(1:11), nrow = 2) # 2행 5열
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:10), nrow = 2, byrow = T)
m
m <- matrix(c(1:10), byrow = T)
m
?matrix
m <- matrix(c(1:10), ncol = 10)
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
c <- cbind(x1, x2)
mc
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
m3
# 행렬 객체에 첨자로 접근
m3[2,3]
m3[1,]
m3[,5]
m3[1, c(2:5)] # 1행에서 2~5열 데이터
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nr = 3, nc = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), n = 3, n = 3)
length
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nr = 3, nc = 3)
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max)
x
apply(x, 1, min) # 행 단위 최대값
apply(x, 2, mean) # 행 단위 최소값
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nr = 3, nc = 3)
x
# 행 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 1, f)
# 사용자 정의 적용
f <- function(x){ # x : 매개변수
x * c(1,2,3)
}
# 행 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 1, f)
result
# 열 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 2, f)
result
# 행렬 객체에 컬럼명 지정하기
colnames(x) <- c('one', 'two', 'three')
x
# 3차원 배열 객체 생성하기
vec <- c(1:12) # 12개 벡터 객체 생성
arr <- array(vec, c(3,2,2))
arr
# 3차원 배열 객체 자료 조회
arr[2,1,2]
arr[,,1]
arr[2, ,1] # 1면2행
# 배열 자료형과 자료 구조
mode(arr); class(arr)
# 데이터 셋 가져오기
library(RSADBE)
data(Bug_Metrics_Software)
# 데이터 셋 자료보기
Bug_Metrics_Software
str(Bug_Metrics_Software)
# key를 이용하여 value에 접근하기
member <- list(name=c("홍길동", "유관순"),
age=c(35,25),
address=c("서울", "경기도"),
gender=c("남자", "여자"),
htype=c("아파트", "오피스텔"))
member
# key를 이용하여 value에 접근하기
member$name
member$name[1]
member$name[2]
member$name[3] <- "이순신"
# key를 이용하여 value에 접근하기
member$name
member$age <- 45
member
member$id <- c("hong", "you")
member
member$age <- NULL
member
# 1개 값을 갖는 리스트 객체 생성
list <- list("lee", "이순신", 35)
list
# 1개 이상의 값을 갖는 리스트 객체 생성
num <- list(c(1:5), c(6:10))
num
# 리스트 자료구조 -> 벡터 구조로 변경하기
unlist <- unlist(num)
unlist
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
b <- list(c(6:10))
a; b
c(a,b)
a; b
c <- lapply(c(a,b), max) # list로 결과 반환
c
mode(c);class(c)
# 리스트 형식을 벡터 형식으로 반환하기
c <- sapply(c(a,b), max)
c
mode(c); class(c) # "numeric" "integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list(10,20,30), list(100,200,300))
multi_list
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
mode(multi_list);class(multi_list)
multi_list
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
