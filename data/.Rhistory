qplot(clarity,data=diamonds,color=cut, geom="bar") # 테두리 적용.
# geom="point"
qplot(wt,mpg,data=mtcars,size=qsec, geom="point")
# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용.
qplot(wt,mpg,data=mtcars,size=factor(cyl),color=factor(carb), geom="point")
# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용.
qplot(wt,mpg,data=mtcars,size=factor(cyl),color=factor(carb), geom="point")
# qsec 변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용.
qplot(wt,mpg,data=mtcars,size=qsec,color=factor(carb),shape=factor(cyl),geom = "point" )
# geom="smooth"
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"))
qplot(wt,mpg,data=mtcars,color=factor(cyl),geom=c("point","smooth")) # cyl 변수 요인으로 색상 적용.
# qsec 변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용.
qplot(wt,mpg,data=mtcars,size=qsec,color=factor(carb),shape=factor(cyl),geom = "point" )
# geom="smooth"
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"))
qplot(wt,mpg,data=mtcars,color=factor(cyl),geom=c("point","smooth")) # cyl 변수 요인으로 색상 적용.
# geom="line"
qplot(mpg,wt,data=mtcars,color=factor(cyl),geom="line")
qplot(mpg,wt,data=mtcars,color=factor(cyl),geom=c("point","line"))
# 단계1(layer1): 배경 설정하기.
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg,aes(x=displ,y=hwy)) # aesthetics(미학)
qplot(mpg,wt,data=mtcars,color=factor(cyl),geom=c("point","line"))
# 단계1(layer1): 배경 설정하기.
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg,aes(x=displ,y=hwy)) # aesthetics(미학)
# 단계2(layer2): 그래프 추가하기
# 배경에 산점도 추가
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point()
# 단계3(layer3): 축범위를 조정하는 설정 추가하기.
# x축 범위값을 3~6으로 지정.
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
# 단계2(layer2): 그래프 추가하기
# 배경에 산점도 추가
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point()
# 단계3(layer3): 축범위를 조정하는 설정 추가하기.
# x축 범위값을 3~6으로 지정.
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
# (1) 미적 요소 맵핑
p <- ggplot(diamonds, aes(carat,price,color=cut))
p + geom_point()
# (2) 기하학적 객체(geometric object:점/선/막대) 적용
p <- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p + geom_line()
p <- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p + geom_point()
# (3) 미적 요소 맵핑과 기하학적 객체 적용
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom="bar") # stat_bin():(aes():미적요소)+ ('geom=') : 기하학적 요소 + 기능 동시 적용.
# (3) 미적 요소 맵핑과 기하학적 객체 적용
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom="bar") # stat_bin():(aes():미적요소)+ ('geom=') : 기하학적 요소 + 기능 동시 적용.
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom="area")
p + stat_bin(aes(fill=cut), geom="area")
p + stat_bin(aes(color=cut,size=..density..), geom="point")
p + stat_bin(aes(fill=cut), geom="area")
p + stat_bin(aes(color=cut,size=..density..), geom="point")
# (4) 테마(Thema) 적용
p <- ggplot(diamonds, aes(carat,price,color=cut))
p <- p + geom_point() + ggtitle("다이아몬드 무게와 가격의 상관관계")
p
p + theme(
title=element_text(color="blue",size=25), #축제목
axis.title=element_text(size=14,face="bold"), # 축제목
axis.title.x=element_text(color="green"), # x축 제목
axis.title.y=element_text(color="red"), # y축 제목
axis.text=element_text(size="14"), # 축이름크기
axis.text.x=element_text(color="orange"), # x축이름(0~5)
axis.text.y=element_text(color="yellow"), # y축이름(0~15000)
legend.title = element_text(size=20,face="bold",color = "red"), # 범례
legend.position = "bottom",
legend.direction="horizontal")
p + theme(
title=element_text(color="blue",size=25), #축제목
axis.title=element_text(size=30,face="bold"), # 축제목
axis.title.x=element_text(color="green"), # x축 제목
axis.title.y=element_text(color="red"), # y축 제목
axis.text=element_text(size="14"), # 축이름크기
axis.text.x=element_text(color="orange"), # x축이름(0~5)
axis.text.y=element_text(color="yellow"), # y축이름(0~15000)
legend.title = element_text(size=20,face="bold",color = "red"), # 범례
legend.position = "bottom",
legend.direction="horizontal")
p <- ggplot(diamonds, aes(carat,price,color=cut))
p + geom_point()
# 가장 최근 그래프 저장
ggsave(file="D:/heaven_dev/workspaces/R/output/diamond_price.pdf")
ggsave(file="D:/heaven_dev/workspaces/R/output/diamond_price.jpg", dpi=72)
# 변수에 저장된 그래프 저장
p <- ggplot(diamonds, aes(clarity)) # 선명도
p <- p + geom_bar(aes(fill=cut), position="fill") # bar 추가
p
ggsave(file="D:/heaven_dev/workspaces/R/output/diamond_price.png",plot=p,width=10, height=5)
# 지도 관련 패키지 설치
library(ggplot2)  # ggplot2 패키지 로딩
install.packages("ggmap") # ggmap 패키지 설치
library(ggmap)
# 위도와 경도 중심으로 지도 시각화
# 실습: 서울을 중심으로 지도 시각화하기
# 단계 1: 서울 지역의 중심 좌표 설정
seoul <- c(left = 126.77, bottom = 37.40,
right = 127.17, top = 37.70)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 12, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 20, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 8, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 1000, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 1000, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 10000000, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 12, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 10, maptype = 'terrain')
ggmap(map)
# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 14, maptype = 'terrain')
ggmap(map)
ggmap(map)
# 실습 : 2019년도 1월 대한민국 인구수를 기준으로 지역별 인구수 표시하기
# 단계 1: 데이터 셋 가져오기
pop <- read.csv(file.choose(), header = T)
View(pop)
library(stringr)
region <- pop$'지역명'
lon <- pop$LON
lat <- pop$LAT
tot_pop <- as.numeric(str_replace_all(pop$'총인구수', ',', ''))
df <- data.frame(region, lon, lat, tot_pop)
df
df <- df[1:17, ]
df
df <- data.frame(region, lon, lat, tot_pop)
df
df <- df[1:17, ]
df
# 단계 2: 정적 지도 이미지 가져오기
daegu <- c(left = 123.4423013, bottom = 32.8528306,
right = 131.601445, top = 38.8714354)
map <- get_stamenmap(daegu, zoom = 7, maptype = 'watercolor')
# 단계 3: 지도 시각화하기
layer1 <- ggmap(map)
layer1
# 단계 4: 포인트 추가
layer2 <- layer1 + geom_point(data = df,
aes(x = lon, y = lat,
color = factor(tot_pop),
size = factor(tot_pop)))
layer2
# 단계 5: 텍스트 추가
layer3 <- layer2 + geom_text(data = df,
aes(x = lon + 0.01, y = lat + 0.08,
label = region), size = 3)
layer3
# 단계 6: 크기를 지정하여 파일로 저장하기
ggsave("D:/heaven_dev/workspaces/R/output/pop201901.png", scale = 1, width = 10.24, height = 7.68)
# 1) 패키지 설치
#   - RJDBC 패키지를 사용하기 위해서는 우선 java를 설치해야 한다.
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
# 2) 패키지 로딩
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_291')
library(DBI)
library(rJava)
library(RJDBC) # rJava에 의존적이다(rJava 먼저 로딩).
# 2) 패키지 로딩
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(DBI)
library(rJava)
library(RJDBC) # rJava에 의존적이다(rJava 먼저 로딩).
###  Oracle 11g Ex.
# driver
drv <- JDBC("oracle.jdbc.driver.OracleDriver",
"C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6.jar") # driver 이름, 경로
# db 연동(driver, url, id, pwd)
conn <- dbConnect(drv,"jdbc:oracle:thin:@//localhost:1521/xe","scott","tiger")
# (1) 모든 레코드 검색
query <- "select * from test_table"
dbGetQuery(conn, query)
# (2) 조건 검색 - 나이가 30세 이상인 레코드 조회
query <- "select * from test_table where age >= 30"
result <- dbGetQuery(conn, query)
result
str(result) # 'data.frame':	1 obs. of  4 variables:
View(result)
# (3) 정렬 조회 - 나이 컬럼을 기준으로 내림차순 정렬
query <- "select * from test_table order by age desc"
dbGetQuery(conn, query)
# (4) 레코드 삽입
query <- "insert into test_table values('kang', '1234','강감찬', 35)"
dbSendUpdate(conn, query)
# (5) 레코드 수정 : 데이터 '강감찬'의 나이를 40으로 수정.
query <- "update test_table set age=40 where name='강감찬'"
dbSendUpdate(conn, query)
query <- "select * from test_table"
dbGetQuery(conn, query) # DBI
# (5) 레코드 수정 : 데이터 '강감찬'의 나이를 40으로 수정.
query <- "update test_table set age=40 where name='강감찬'"
dbSendUpdate(conn, query)
query <- "select * from test_table"
dbGetQuery(conn, query) # DBI
# (6) 레코드 삭제 - 데이터 '홍길동' 레코드 삭제
query <- "delete from test_table where name='홍길동'"
dbSendUpdate(conn, query) # RJDBC
query <- "select * from test_table"
dbGetQuery(conn, query) # DBI
# (7) db 연결 종료
dbDisconnect(conn) #DBI
# (1) 패키지 설치 및 준비
#install.packages("KoNLP")
# - package ‘KoNLP’ is not available...
install.packages('https://cran.rstudio.com/bin/windows/contrib/3.6/sessioninfo_1.1.1.zip', repos = NULL)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",repos = NULL)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.6/devtools_2.4.1.zip",repos = NULL)
# Sejong 설치: KoNLP와 의존성 있는 현재 버전의 한글 사전 Sejong 패키지 설치.
install.packages("Sejong")
install.packages(c("hash","tau","RSQLite","rJava"))
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_291')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
# Sejong 설치: KoNLP와 의존성 있는 현재 버전의 한글 사전 Sejong 패키지 설치.
install.packages("Sejong") # 한글 사전 기반
install.packages(c("hash","tau","RSQLite","rJava"))
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
library(KoNLP)
install.packages(c("wordcloud","tm"))
library(wordcloud); library(tm)
library(rJava); library(devtools)
library(rJava); library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("fs")
library(Sejong); library(hash); library(tau); library(RSQLite)
# Sejong 설치: KoNLP와 의존성 있는 현재 버전의 한글 사전 Sejong 패키지 설치.
install.packages("Sejong") # 한글 사전 기반
install.packages(c("hash","tau","RSQLite","rJava"))
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
install.packages("devtools")
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
install.packages("devtools")
install.packages("devtools")
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
library(KoNLP)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.6/devtools_2.4.1.zip",repos = NULL)
# (1) 패키지 설치 및 준비
#install.packages("KoNLP")
# - package ‘KoNLP’ is not available... # 한국어가 가능하게 해주는 패키지
install.packages('https://cran.rstudio.com/bin/windows/contrib/3.6/sessioninfo_1.1.1.zip', repos = NULL)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip",repos = NULL)
library(Sejong); library(hash); library(tau); library(RSQLite)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
library(rJava); library(devtools)
library(KoNLP)
## 1.1 평균과 분산 그리고 표준편차
score1 <- c(85, 90, 93, 86, 82)
score2 <- c(100, 100, 50, 0, 0)#c(85, 90, 93, 46, 42)
score3 <- c(60, 60, 50, 40, 40)#c(100, 100, 54, 50, 52)
score10 <- c(100, 50, 30, 20, 20, 20, 10, NA)
mean(score10, na.rm = T)
# 평균
mean(score1)  # [1] 87.2 : 평균값
mean(score2)  # [1] 71.2 : 평균값
mean(score3)  # [1] 71.2 : 평균값
mean(score10, na.rm = T)
mean(score10)
# ex) 6, 6, 7, 8, 9, 10
num <- c(6, 6, 7, 8, 9, 10)
median(num) # 7.5(=(7+8)/2)
# 분산(Variance) : 편차 값을 제곱해서 마이너스 값을 플러스 값으로 바꾼 후 평균을 구하는 방법.
# ex) ((100-71.2)^2+(100-71.2)^2+(54-71.2)^2+(50-71.2)^2+(52-71.2)^2) / 5 = 554.56
score <- c(100, 100, 54, 50, 52)
mean(score) # 71.2
var(score)
sd(score)
# 3.2 prettyR 패키지 이용
install.packages("prettyR")
library(prettyR)
# 전체 변수 대상
freq(data) # 각 변수별 : 빈도, 결측치, 백분율, 특징-소수점 제공
# 개별 변수 대상
freq(data$gender) # 빈도, 결측치, 백분율
# 3.1 Hmisc 패키지 이용
install.packages("Hmisc")
library(Hmisc)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data)
library(Hmisc)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data)
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data)
# 개별 변수 기술 통계량
describe(data$gender) # 특정 변수(명목) 기술통계량-범주/빈도수/비율 제공.
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest / highest
# 전체 변수 대상 기술통계량 제공 - 빈도와 비율 데이터 일괄 수행
describe(data)
# 개별 변수 기술 통계량
describe(data$gender) # 특정 변수(명목) 기술통계량-범주/빈도수/비율 제공.
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest / highest
# 개별 변수 기술 통계량
describe(data$gender) # 특정 변수(명목) 기술통계량-범주/빈도수/비율 제공.
summary(data$age)
# 이상치 제거 # ifelse도 이상치 제거에 쓰임
data <- subset(data, data$gender==1 | data$gender==2) # 성별 outlier 제거.
x <- table(data$gender) # 성별에 대한 빈도 수 저장.
x
barplot(x) # 범주형(명목/서열 척도) 시각화 -> 막대차트
# 실습 데이터 셋 가져오기
data <- read.csv("D:/heaven_dev/workspaces/R/data/descriptive.csv", header = T)
View(data)
# 데이터 특성 보기
dim(data) # 300 8 - 차원보기 # 행렬의 갯수값을 반환해준다.
mode(data) # list
class(data) # data.frame
length(data) # 8
length(data$survey) # 300
str(data) # 'data.frame':	300 obs. of  8 variables:
str(data$survey) # 특정컬럼만 보고 싶을 때
# 데이터 특성(최소, 최대, 중위수, 평균, 분위수, 노이즈-NA) 제공
summary(data)
# 2.1 명목척도 기술 통계량 # 연산의 의미가 없다(예: 남녀), 식별만 하면 됨
length(data$gender) # 300
summary(data$gender)
table(data$gender) # 각 성별 빈도 수 - outlier(이상치)-> 0, 5
# 이상치 제거 # ifelse도 이상치 제거에 쓰임
data <- subset(data, data$gender==1 | data$gender==2) # 성별 outlier 제거.
x <- table(data$gender) # 성별에 대한 빈도 수 저장.
x
barplot(x) # 범주형(명목/서열 척도) 시각화 -> 막대차트
# 개별 변수 기술 통계량
describe(data$gender) # 특정 변수(명목) 기술통계량-범주/빈도수/비율 제공.
describe(data$age) # 특정 변수(비율) 기술통계량 - lowest / highest
summary(data$age)
# 3.2 prettyR 패키지 이용
install.packages("prettyR")
library(prettyR)
# 전체 변수 대상
freq(data) # 각 변수별 : 빈도, 결측치, 백분율, 특징-소수점 제공
# 개별 변수 대상
freq(data$gender) # 빈도, 결측치, 백분율
# Sejong 설치: KoNLP와 의존성 있는 현재 버전의 한글 사전 Sejong 패키지 설치.
install.packages("Sejong") # 한글 사전 기반
install.packages(c("hash","tau","RSQLite","rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
install.packages(c("hash", "tau", "RSQLite", "rJava"))
library(Sejong); library(hash); library(tau); library(RSQLite)
# 전체 변수 대상
freq(data) # 각 변수별 : 빈도, 결측치, 백분율, 특징-소수점 제공
# 개별 변수 대상
freq(data$gender) # 빈도, 결측치, 백분율
# 1) 거주지역 변수 리코딩과 비율 계산
data$resident2[data$resident==1] <- "특별시"
data$resident2[data$resident>=2 & data$resident<=4] <- "광역시"
data$resident2[data$resident==5] <- "시구군"
freq(data$resident2)
freq(data$resident2)
library(prettyR)
# 전체 변수 대상
freq(data) # 각 변수별 : 빈도, 결측치, 백분율, 특징-소수점 제공
# 1) 거주지역 변수 리코딩과 비율 계산
data$resident2[data$resident==1] <- "특별시"
data$resident2[data$resident>=2 & data$resident<=4] <- "광역시"
data$resident2[data$resident==5] <- "시구군"
freq(data$resident2)
view(data)
view(data)
View(data)
freq(data$resident2)
# 2) 성별 변수 리코딩과 비율 계산
data$gender2[data$gender==1] <- "남자"
data$gender2[data$gender==2] <- "여자"
freq(data$gender2)
# 3) 나이 변수 리코딩과 비율 계산
summary(data$age)
data$age2[data$age <= 45] <- "중년층"
data$age2[data$age >= 46 & data$age <= 59] <- "장년층"
data$age2[data$age >= 60] <- "노년층"
freq(data$age2)
# 4) 학력 수준 변수 리코딩과 비율계산
data$level2[data$level == 1] <- "고졸"
data$level2[data$level == 2] <- "대졸"
data$level2[data$level == 3] <- "대학원졸"
freq(data$level2)
# 5) 합격 여부 변수 리코딩과 비율 계산
data$pass2[data$pass == 1] <- "합격"
data$pass2[data$pass == 2] <- "불합격"
freq(data$pass2)
# 1) 실습 파일 가져오기
data <- read.csv("D:/heaven_dev/workspaces/R/data/cleanDescriptive.csv", header = T)
View(data)
head(data) # 변수 확인
# 1) 실습 파일 가져오기
data <- read.csv("D:/heaven_dev/workspaces/R/data/cleanDescriptive.csv", header = T)
View(data)
head(data) # 변수 확인
# 2) 변수 리코딩
x <- data$level2 # 리코딩 변수 이용(학력수준)
y <- data$pass2  # 리코딩 변수 이용(합격/불합격)
x; y  # 부모학력수준(x) -> 자녀대학진학여부(y)
# 3) 데이터프레임 생성
result <- data.frame(Level=x, Pass=y) # 데이터 프레임 생성 - 데이터 묶음.
dim(result) # 차원보기(248,2)
head(result)
View(result)
# 1) 교차 분할표 작성
table(result) # 빈도보기
head(data) # 변수 확인
x; y  # 부모학력수준(x) -> 자녀대학진학여부(y)
# 3) 데이터프레임 생성
result <- data.frame(Level=x, Pass=y) # 데이터 프레임 생성 - 데이터 묶음.
dim(result) # 차원보기(248,2)
head(result)
View(result)
# 1) 교차 분할표 작성
table(result) # 빈도보기
# 2) 교차분할표 생성을 위한 패키지 설치
install.packages("gmodels")
library(gmodels)
# 3) 패키지를 이용한 교차 분할표 생성
CrossTable(x, y)
# 교차테이블에 카이검정 적용
CrossTable(x, y, chisq = T)
chisq.test(c(4,6,17,16,8,9))
source("D:/heaven_dev/workspaces/R/src/chap12_CrossTableChiSquare.R", encoding = 'UTF-8', echo=TRUE)
# 5개 제품의 스포츠 음료에 대한 선호도에 차이가 있는지 검정
data <- textConnection(
"스포츠음료종류  관측도수
1               41
2               30
3               51
4               71
5               61
")
class(data)
x <- read.table(data, header = T)
x # 스포츠음료종류   관측도수
str(x)
chisq.test(x$관측도수)
# 5개 제품의 스포츠 음료에 대한 선호도에 차이가 있는지 검정
data <- textConnection(
"스포츠음료종류  관측도수
1               41
2               30
3               51
4               71
5               61
")
class(data)
x <- read.table(data, header = T) # dataFrame 형태로 변환
x # 스포츠음료종류   관측도수
str(x)
chisq.test(x$관측도수)
data <- read.csv("D:/heaven_dev/workspaces/R/data/cleanDescriptive.csv", header = T)
# 독립변수(x) = 설명변수, 종속변수(y) = 반응 변수 생성
x <- data$level2 # 부모의 학력수준
y <- data$pass2  # 자녀의 대학 진학 여부
CrossTable(x, y, chisq = T)
# 1. 파일 가져오기
data <- read.csv("D:/heaven_dev/workspaces/R/data/homogenity.csv", header = T)
View(data)
table(data$method) # 교육방법
table(data$survey) # 만족도
# 1. 파일 가져오기
data <- read.csv("D:/heaven_dev/workspaces/R/data/homogenity.csv", header = T)
View(data)
table(data$method) # 교육방법
table(data$survey) # 만족도
# 전처리 - 결측치/ method와 survey 변수만 서브셋 생성
data <- subset(data, !is.na(survey), c(method, survey))
data
length(data$survey) # 150
# method2 필드 추가
data$method2[data$method == 1] <- "방법1"
data$method2[data$method == 2] <- "방법2"
data$method2[data$method == 3] <- "방법3"
# survey2 필드 추가
data$survey2[data$survey == 1] <- "1. 매우만족"
data$survey2[data$survey == 2] <- "2. 만족"
data$survey2[data$survey == 3] <- "3. 보통"
data$survey2[data$survey == 4] <- "4. 불만족"
data$survey2[data$survey == 5] <- "5. 매우불만족"
# 3. 교차분할표 작성
table(data$method2, data$survey2) # 교차표 생성 -> table(행, 열)
# 4. 교차분할표 생성
CrossTable(data$method2, data$survey2, chisq = T)
