c
mode(c); class(c) # "numeric" "integer"
# 리스트 형식을 벡터(1차원) 형식으로 반환하기
c <- sapply(c(a,b), max)
c
mode(c); class(c) # 자료형:"numeric", 자료구조:"integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list(10,20,30), list(100,200,300))
multi_list
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
multi_list$c1:c3
mode(multi_list); class(multi_list)
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list(10,20,30), list(100,200,300))
multi_list
mode(multi_list); class(multi_list)
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
mode(multi_list); class(multi_list)
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
d <- do.call(rbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("베드로","요한","야고보")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("베드로","요한","야고보")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
# matrix 이용 객체 생성
args(matrix)
m <- matrix(c(1,"베드로", 153,
2,"다니엘", 777,
3,"성령", 888), 3, byrow = T) # 3행으로 셋팅, byrow 행 중심으로
m
class(m)
memp <- data.frame(m)
memp
class(memp)
setwd("D:/heaven_dev/workspaces/R/data")
# txt 파일 이용 객체 생성
getwd()
txtemp <- read.table('D:/heaven_dev/workspaces/R/data')
txtemp
txtemp <- read.table('D:/heaven_dev/workspaces/R/data/')
txtemp
txtemp <- read.table('emp.txt')
txtemp
txtemp <- read.table('emp.txt', header = T, sep = "")
txtemp
txtemp <- read.table('/emp.txt', header = T, sep = "")
txtemp
txtemp <- read.table('emp.txt', header = T, sep = "")
txtemp
class(txtemp)
txtemp <- read.table('emp.txt', header = T, sep = "")
txtemp
class(txtemp)
View(multi_list)
# csv 파일 이용 객체 생성(header=T)
csvtemp
csvtemp; class(csvtemp)
txtemp
class(txtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv')
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=F)
name <- c("사번", "이름", "급여")
csvtemp2 <- read.csv('emp2.csv', header = F)
csvtemp2
csvtemp2 <- read.csv('emp2.csv', header = F, col.names = c)
csvtemp2
csvtemp2 <- read.csv('emp2.csv', header = F, col.names = name)
csvtemp2
# 데이터프레임 만들기
df <- data.frame(x=c(1:5),y=seq(2,10,2), z=c('a', 'b', 'c', 'd', 'e')) # seq(시작, 끝, 2개씩 더해줌)
df
class(df)
df
# 데이터프레임 컬럼명 참조
df$x
# 데이터프레임 컬럼명 참조
df$x; df$y; df$z
# 자료구조, 열수, 행수, 컬럼명 보기
str(df)
# csv 파일 이용 객체 생성(header=T)
csvtemp <- read.csv('emp.csv', header = T)
csvtemp; class(csvtemp)
# csv 파일 이용 객체 생성(header=F)
name <- c("사번", "이름", "급여")
csvtemp2 <- read.csv('emp2.csv', header = F, col.names = name) # col.names에 name변수를 넣어주면 됨
csvtemp2
# 데이터프레임 컬럼명 참조
df$x; df$y; df$z
# 자료구조, 열수, 행수, 컬럼명 보기
str(df) # 5 obs. of  3 variables: # 5개의 오브젝트와 3개의 변수
ncol(df)
nrow(df)
df[c(2:3)]
df[c(2:3)]
# 요약 통계량 보기
summary(df)
df[c(1:3)]
# 요약 통계량 보기
summary(df)
# 데이터프레임 자료에 함수 적용
apply(df[,c(1,2)], 2, sum)
# 데이터프레임 자료에 함수 적용
apply(df[,c(1,2)], 2, sum) # 데이터, 행(1)·열(2), 함수를 수행
# 데이터프레임의 부분 객체 만들기 # 전처리에서 가장 많이 사용하는 함수
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
# 데이터프레임의 부분 객체 만들기 # 전처리에서 가장 많이 사용하는 함수
# 내가 원하는 데이터를 필터하는 용도도
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
y1 <- subset(df, y <= 8) # y가 8이하인 레코드 대상
y1
# 두 개의 조건으로 부분 객체 만들기
xyand <- subset(df, x>=2 & y<=6)
xyand
xyor <- subset(df, x>=2 | y<=6)
xyor
# student 데이터프레임 만들기
sid <- c('A','B','C','D')
score <- c(90, 80, 70, 60)
subject <- c('컴퓨터', '국어국문', '소프트웨어', '유아교육')
student <- data.frame(sid, score, subject)
student
# 자료형과 자료구조 보기
mode(student); class(student) # list, data.frame
str(sid); str(score); str(subject)
str(student)
str(student)
student
# 두 개 이상의 데이터프레임 병합하기
height <- data.frame(id=c(1,2), h=c(180, 175))
weight <- data.frame(id=c(1,2), w=c(80,75))
height; weight
person <- merge(id,h,w)
person
person <- merge(h,w)
person
?merge
person <- merge(height, weight, by.x = "id", by.y = "id") # id를 기준으로 병합
person
# galton 데이터 셋 가져오기
install.packages("UsingR") # 패키지 설치
library(UsingR) # 패키지 메모리에 로드
data("galton") # galton 데이터 셋 가져오기
person <- merge(height, weight, by.x = "id", by.y = "id") # id를 기준으로 병합
person
hist(person)
hist(person)
data("galton") # galton 데이터 셋 가져오기
# galton 데이터 셋 가져오기
install.packages("UsingR") # 패키지 설치
data("galton") # galton 데이터 셋 가져오기
install.packages("UsingR")
# galton 데이터 셋 구조 보기
str(galton)
dim(galton)
head(galton, 20)
head(galton) # default 갯수:6
View(galton)
View(galton)
dim(galton) # 928   2
head(galton, 20)
head(galton) # default 갯수:6
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
library(stringr) # 메모리 로딩
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","")
str_extract_all("홍길동35이순신45강감찬50","")
tail(galton)
tail(galton, 20)
tail(galton)
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
library(stringr) # 메모리 로딩
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","")
str_extract_all("홍길동35이순신45강감찬50","")
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25강감찬2005'
str_extract_all(string, '')
str_extract_all(string, '')
str_extract_all(string, '')
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '강감찬')
# 한글, 영문자, 숫자 추출하기
str_extract_all(string, 'hong')
str_extract_all(string, '25')
str_extract_all(string, '') # 한글 검색
str_extract_all(string, '') # 소문자 검색
str_extract_all(string, '') # 대문자 검색
str_extract_all(string, '') # 숫자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '')
str_extract_all(string, '')
str_extract_all(string, '')
str_extract_all(string, '')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '')
str_extract_all(jumin, '')
# 지정된 길이의 단어 추출하기
name <- '홍길동1234,이순신5678,강감찬1012'
str_extract_all(name, '')
str_extract_all(name, '')
# 문자열 위치(index) 구하기
string <- 'hongkd105leess1002you25강감찬2005'
str_locate(string, '강감찬')
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
# 부분 문자열
string_sub <- str_sub(string, 1, len-7)
string_sub
string_sub <- str_sub(string, 1, 23)
string_sub
# 대문자, 소문자 변경하기
str_to_upper(string_sub)
str_to_lower(string_sub)
# 문자열 교체하기
string_rep <- str_replace(string_sub, 'hongkild105', '홍길동35,')
string_rep <- str_replace(string_rep, 'lee1002', '이순신45,')
string_rep <- str_replace(string_rep, 'you25', '유관순25,')
string_rep
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]")
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]{2}") #[0-9]사이의 숫자값, {2}연속 2자리인 것만 추출하겠다.
str_extract_all("홍길동35이순신45강감찬50","[0-9]{2}")
str_extract_all(string, '[0-9]{3}') # 3자 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3}') # 3자 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3}') # 3자 연속된 알파벳 추출 # 소문자, 대문자 구분
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25강감찬2005'
str_extract_all(string, '[a-z]{3}') # 3자 연속된 알파벳 추출 # 소문자, 대문자 구분
str_extract_all(string, '[a-z]{3,}') # 3글자 이상 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3,5}') # 3~5글자 범위 안에 속하는 알파벳 추출
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '강감찬')
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25베드로로2005'
str_extract_all(string, '베드로')
str_extract_all(string, '[a-z]{3}') # 3자 연속된 알파벳 추출 # 소문자, 대문자 구분
str_extract_all(string, '[a-z]{3,}') # 3글자 이상 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3,5}') # 3~5글자 범위 안에 속하는 알파벳 추출
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '베드로')
# 한글, 영문자, 숫자 추출하기
str_extract_all(string, 'hong')
str_extract_all(string, '25')
str_extract_all(string, '') # 한글 검색
str_extract_all(string, '') # 소문자 검색
str_extract_all(string, '') # 대문자 검색
str_extract_all(string, '[가-힣]') # 한글 검색
str_extract_all(string, '') # 소문자 검색
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25베드로2005'
str_extract_all(string, '[a-z]{3}') # 3자 연속된 알파벳 추출 # 소문자, 대문자 구분
str_extract_all(string, '[a-z]{3,}') # 3글자 이상 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3,5}') # 3~5글자 범위 안에 속하는 알파벳 추출
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '베드로')
str_extract_all(string, '[가-힣]{3}') # 한글 검색
str_extract_all(string, '[a-z]{3}') # 소문자 검색
str_extract_all(string, '[A-Z]{3}') # 대문자 검색
str_extract_all(string, '[0-9]{4}') # 숫자 검색
str_extract_all(string, '[가-힣]{3}') # 한글 검색
str_extract_all(string, '[a-z]{3}') # 소문자 검색
str_extract_all(string, '[A-Z]{3}') # 대문자 검색
str_extract_all(string, '[0-9]{4}') # 숫자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '[^a-z]') # ^표시가 제외외
str_extract_all(string, '[^a-z]{4}')
str_extract_all(string, '[^a-z]{4}') # 알파벳을 제외한 4개의 연속
str_extract_all(string, '[^가-힣]')
str_extract_all(string, '[^가-힣]{5}')
str_extract_all(string, '[^0-9]{3}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '')
str_extract_all(jumin, '')
str_extract_all(string, '[^0-9]{3}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '')
str_extract_all(jumin, '')
str_extract_all(jumin, '[0-9]{6}')
str_extract_all(jumin, '[0-9]{7}')
str_extract_all(jumin, '[0-9]{6}-{1234}')
str_extract_all(jumin, '[0-9]{6}-{1234}[0-9]{6}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '[0-9]{6}-{1234}[0-9]{6}')
str_extract_all(jumin, '[0-9]{6}-[1234][0-9]{6}')
str_extract_all(jumin, '\d')
str_extract_all(jumin, '[0-9]{6}-[1234]{1}[0-9]{6}')
str_extract_all(jumin, '\\d{6}-[1234]\\d{6}') # \\두번을 써야지 문자 '\'로 인식
str_extract_all(jumin, '\d{6}-[1234]\d{6}') # \\두번을 써야지 문자 '\'로 인식
str_extract_all(jumin, '\\d{6}-[1234]\\d{6}') # \\두번을 써야지 문자 '\'로 인식
# 지정된 길이의 단어 추출하기
name <- '홍길동1234,이순신5678,강감찬1012'
str_extract_all(name, '\\w{7,}') # \w 소문자 word
str_extract_all(name, '\\w{7,}') # \w 특수문자 제외한 모든 문자
# '\\w': 한글, 영문자, 숫자는 포함.
# '\\W': 특수문자 선택.
str_extract_all(name, '\\W')
# 문자열 위치(index) 구하기
string <- 'hongkd105leess1002you25강감찬2005'
str_locate(string, '강감찬')
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
str_locate(string, '강감찬')
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
# 부분 문자열
string_sub <- str_sub(string, 1, len-7) # 30-7
string_sub
# 부분 문자열
string_sub <- str_sub(string, 1, len-7) # 30-7 = 23개까지의 데이터만을
string_sub
string_sub <- str_sub(string, 1, 23)
string_sub
# 대문자, 소문자 변경하기
str_to_upper(string_sub)
str_to_lower(string_sub)
# 문자열 교체하기
string_rep <- str_replace(string_sub, 'hongkild105', '홍길동35,')
string_rep <- str_replace(string_rep, 'lee1002', '이순신45,')
string_rep <- str_replace(string_rep, 'you25', '유관순25,')
string_rep
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan(10,20,30)
num
# 키보드로 문자 입력하기
name <- scan(what = character())
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
df <- edit(df)
df <- edit(df)
# 키보드로 숫자 입력하기
num <- scan()
10 20 30
num
# 키보드로 숫자 입력하기
num <- scan()
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
df <- edit(df)
df
df <- edit(df)
df <- edit(df)
student <- read.table(file = "student.txt")
student
mode(student); class(student)
df
student <- read.table(file = "student.txt")
student
df <- edit(df)
df
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file = "student2.txt", sep = ";", header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file = "student3.txt", header = T, na.strings = "-")
student3
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
df
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
student <- read.table(file = "student.txt")
student
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file = "student1.txt", header = T )
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file = "student2.txt", sep = ";", header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file = "student3.txt", header = T, na.strings = "-")
student3
