v + w
v + w
v + w
v + w
v <- 5
w <- 10
v + w
print("Hello, R!!!") # ctrl+Enter
print("Hello, R!!!") # ctrl+Enter
# R Package 보기
dim(available.packages()) # dimension 차원
available.packages()
# 패키지 사용법
install.packages(stringr)
install.packages(ichimoku)
# 패키지 사용법
install.packages("stringr")
install.packages("ichimoku")
library("stringr") # 메모리에 로딩 : "" 생략 가능
search()
library("ichimoku") # 메모리에 로딩 : "" 생략 가능
search() # 검색
# 패키지 제거
remove.packages("stringr")
search()
search()
# R session 보기
sessionInfo()
datasets::
data()
data()
hist(Nile)
hist(ichimoku)
data()
hist(iris)
hist(iris)
Nile
data()
hist(Nile)
hist(iris)
# R session 보기
sessionInfo()
search()
available.packages()
# R Package 보기
dim(available.packages()) # dimension 차원, 18688 패키지 수가 있고 17개의 정보를 가지고 있다.
print("Hello, R!!!") # ctrl+Enter
lines(density(Nile))
hist(Nile) # hist - 히스토그램의 약자
# 단계2 : 밀도(density)를 기준으로 히스토그램 그리기
hist(Nile, freq = F) # Boolean형태로 F(alse), 곧 대문자로만 작성해야됨, 소문자로 쓰면 에러가 나게 됨. T는 당연히 True이다. 자바와 이런 차이가 있다. 심지어 순서를 바꿔도 상관없다.
lines(density(Nile))
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
mode(gender)
class(gender)
plot(gender)
hist(Nile) # hist - 히스토그램의 약자
# 단계2 : 밀도(density)를 기준으로 히스토그램 그리기
hist(Nile, freq = F) # Boolean형태로 F(alse), 곧 대문자로만 작성해야됨, 소문자로 쓰면 에러가 나게 됨. T는 당연히 True이다. 자바와 이런 차이가 있다. 심지어 순서를 바꿔도 상관없다.
lines(density(Nile))
Ngender
# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender) # 특정 변수에 담겨져있는 값들을 Domain, factor라고 한다.
Ngender
table(Ngender)
# Factor형 변수로 차트 그리기
plot(Ngender)
mode(Ngender)
class(Ngender)
is.factor(Ngender)
# Factor Nominal 변수
Ngender
# factor() 함수 이용 Factor형 변환
args(factor) # parameter매개변수 = argument인자
?factor
factor(gender)
factor(gender, levels = c('woman','man'), labels = c("여자","남자"), ordered = T)
hist(gender)
plot(gender)
plot(gender)
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
mode(gender)
class(gender)
plot(gender)
Ogender
Ogender <- factor(gender, levels = c('woman','man'), labels = c("여자","남자"), ordered = T)
Ogender
# 순서 없는 요인과 순서 있는 요인형 변수로 차트 그리기
par(mfrow=c(1,2))
plot(Ngender)
plot(Ogender)
# 도움말 보기
i <- sum(1, 2, 3)
i
help(sum)
?sum
help(sum)
help(sum)
# 함수 파라메터 보기
args(sum)
# 함수 사용 예제 보기
example(sum)
# 작업 공간 지정
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
setwd("D:/heaven_dev/workspaces/R/data")
# 작업 공간 지정
getwd() # 현재 작업 위치
# 함수 파라메터 보기
args(sum)
# 함수 사용 예제 보기
example(sum)
# 함수 사용 예제 보기
example(Ngender)
# 함수 사용 예제 보기
example(Ogender)
# 함수 사용 예제 보기
example(sum)
# R session 보기
sessionInfo()
data()
available.packages()
hist(Nile) # hist - 히스토그램의 약자
# 단계2 : 밀도(density)를 기준으로 히스토그램 그리기
hist(Nile, freq = F) # Boolean형태로 F(alse), 곧 대문자로만 작성해야됨, 소문자로 쓰면 에러가 나게 됨. T는 당연히 True이다. 자바와 이런 차이가 있다. 심지어 순서를 바꿔도 상관없다.
?hist # 기능 설명
lines(density(Nile))
# 히스토그램을 파일에 저장하기
par(mfrow=c(1, 1)) # c - combine # plots창 영역에 1개 그래프만 표시하겠다
pdf("D:/heaven_dev/workspaces/R/output/batch.pdf")
hist(rnorm(20)) # random하게 정규분포를 뽑아줘.
dev.off()
## 4. 변수와 자료형
# 변수 사용 예
age <- 25 # '<-' 안 넣고 '=' 넣어도 상관없다. 단지 가독성때문에 '<-'사용
age
age <- 35
age
var1 <- 50
var2 <- 100
goods.model <- "lg-320" # 상품 모델명명
goods.name <- "냉장고"
goods.price <- 850000
goods.desc <- "등급 최고 품질질"
rm(goods.model,goods.name,goods.price,goods.desc)
# 스칼라 변수 사용 예(스칼라 - 변수에 하나의 값만 담긴다.)
name <- "홍길동"
name
# 자료형
int <- 20    # 숫자형(정수) # 저장할 때 20.0으로 저장됨.
double <- 3.14 # 숫자형(실수)
string <- "홍길동"  # 문자형
boolean <- TRUE  # 진리값 : TRUE(T) / FALSE(F) [무조건 대문자]
boolean
boolean <- 3.14
boolean
# 자료형 확인
is.numeric(int) # TRUE #정수, 실수냐? 묻기
# 자료형
int <- 20    # 숫자형(정수) # 저장할 때 20.0으로 저장됨.
# 자료형 확인
is.numeric(int) # TRUE #정수, 실수냐? 묻기
# 자료형 확인
is.numeric(int) # TRUE #정수, 실수냐? 묻기
is.integer(int) # FALSE : 정수 값도 부동소숫점으로 관리.
result <- x * 3
result
# 문자 원소를 숫자 원소로 형변환
x <- c(1, 2, 3) # combine 결합하다
x
result <- x * 3
result
# 숫자 원소를 문자 원소로 형변환
y <- c(1, 2, "3") # 서로 다른형을 저장할 수 없다. 숫자 + 문자의 경우에만 강제 형변환 해줌.
y
result <- y * 5
result <- as.integer(y) * 5
result
# 복소수형 자료 생성과 형변환 # 실수와 허수 = 복소수
z <- 5.3 - 3i
Re(z) # 실수
Im(z) # 허수
is.complex(z) # TRUE
as.complex(5.3) # 5.3+0i # 강제로 복소수로 형변환을 해줌.
is.complex(z) # TRUE
# 스칼라 변수의 자료형
mode(int) # "numeric"
mode(string) # "character"
mode(boolean) # "logical"
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
mode(gender)
class(gender)
plot(gender)
# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender) # 특정 변수에 담겨져있는 값들을 Domain, factor라고 한다.
Ngender
table(Ngender) # 출력의 결과를 테이블 형태로 보여주는 것. 빈도수를
# Factor형 변수로 차트 그리기
plot(Ngender)
mode(Ngender) # "numeric"
class(Ngender) # "factor"
is.factor(Ngender) # TRUE
# Factor Nominal 변수
Ngender
plot(gender)
# Factor형 변수로 차트 그리기
plot(Ngender)
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
plot(gender)
# Factor형 변수로 차트 그리기
plot(Ngender)
# Factor Nominal 변수
Ngender
# factor() 함수 이용 Factor형 변환
args(factor) # parameter매개변수 = argument인자 # parameter만 보고 싶을 때 args()사용 가능하다. # ?factor
Ogender <- factor(gender, levels = c('woman','man'), labels = c("여자","남자"), ordered = T)
Ogender
# factor() 함수 이용 Factor형 변환
args(factor) # parameter매개변수 = argument인자 # parameter만 보고 싶을 때 args()사용 가능하다. # ?factor
Ogender
# 순서 없는 요인과 순서 있는 요인형 변수로 차트 그리기
par(mfrow=c(1,2))
plot(Ngender)
plot(Ogender)
# 도움말 보기
i <- sum(1, 2, 3)
i # 6
help(sum)
?sum
# 함수 파라메터 보기
args(sum)
# 함수 사용 예제 보기
example(sum)
# 작업 공간 지정
getwd() # 현재 작업 위치
setwd("D:/heaven_dev/workspaces/R/data")
plot(gender)
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
mode(gender)
class(gender)
# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender) # 특정 변수에 담겨져있는 값들을 Domain, factor라고 한다.
Ngender
table(Ngender) # 출력의 결과를 테이블 형태로 보여주는 것. 빈도수를
# Factor형 변수로 차트 그리기
plot(Ngender)
