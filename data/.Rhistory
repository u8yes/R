# 순서 없는 요인과 순서 있는 요인형 변수로 차트 그리기
par(mfrow=c(1,2))
plot(Ngender)
plot(Ogender)
# 도움말 보기
i <- sum(1, 2, 3)
i # 6
help(sum)
?sum
# 함수 파라메터 보기
args(sum)
# 함수 사용 예제 보기
example(sum)
# 작업 공간 지정
getwd() # 현재 작업 위치
setwd("D:/heaven_dev/workspaces/R/data")
plot(gender)
# 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
gender
mode(gender)
class(gender)
# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender) # 특정 변수에 담겨져있는 값들을 Domain, factor라고 한다.
Ngender
table(Ngender) # 출력의 결과를 테이블 형태로 보여주는 것. 빈도수를
# Factor형 변수로 차트 그리기
plot(Ngender)
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2, 3, 4, 5) # combine 함수
x
x <- c(1:20) # 콜론 : 범위
x
y <- 10:20
y
##  - seq() 함수 이용 벡터 객체 생성
x <- seq(1, 10, 2)
x
##  - rep() 함수 이용 벡터 객체 생성
help(rep)
y <- 10:20
y
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2.5, 3, 4, 5) # combine 함수
x
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2, 3, 4, 5) # combine 함수
x
# 1. Vector 자료 구조
##  - C() 함수 이용 벡터 객체 생성
x <- c(1, 2.5, 3, 4, 5) # combine 함수
x
x <- c(1:20) # 콜론 : 범위
x
y <- 10:20
y
##  - seq() 함수 이용 벡터 객체 생성
x <- seq(1, 10, 2)
x
##  - rep() 함수 이용 벡터 객체 생성
help(rep)
rep(1:3, 3)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
example(rep)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x; y
union(x, y)     # 합집합(x+y)
setdiff(x, y)   # 차집합(x-y)
intersect(x, y) # 교집합(x^y)
##  - seq() 함수 이용 벡터 객체 생성
x <- seq(1, 10, 2) # sequence(시작, 종료, 증감)
x
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x; y
x
y
x; y
union(x, y)     # 합집합(x+y)
setdiff(x, y)   # 차집합(x-y)
intersect(x, y) # 교집합(x^y)
?setdiff
# 숫자형, 문자형, 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v2 <- c(33, -5, 20:23, 12, "4") # 데이터를 모두 문자형으로 변환.
v2
# 한 줄에 명령문 중복 사용
v1; mode(v1)
# 한 줄에 명령문 중복 사용
v1; mode(v2)
v2; mode(v2)
age
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순자", "강감촌치킨")
age
age
rep(1:3, 300) # replicate(대상, 반복수)
rep(1:3, 3) # replicate(대상, 반복수)
age
#    홍길동     이순자     강감촌치킨
#    30         35         40
age <- NULL # age 변수 데이터 삭제제
age
# 벡터 자료 참조하기
a <- c(1:50)
a
a[10]
a[9]
a[10]
a[c(10:45)]
a[c(10, 20, 30, 40)]
a[10:(length(a)-5)]
a[10:length(a)-5]
a[10:length(a)-10] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
a[10:length(a)-11] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
# 잘못된 벡터 첨자 사용 예
a
# 잘못된 벡터 첨자 사용 예
a[1,2]
# 잘못된 벡터 첨자 사용 예
a[5, 10]
# 잘못된 벡터 첨자 사용 예
a[5.0, 10.0]
# 잘못된 벡터 첨자 사용 예
a[c(5, 10)]
# 잘못된 벡터 첨자 사용 예
a[2, 10] # Error in a[5, 10] : incorrect number of dimensions
# 잘못된 벡터 첨자 사용 예
a[2, 2] # Error in a[5, 10] : incorrect number of dimensions
# c() 함수에서 콤마 사용 예
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v1[1]
v1[3]
v1[5]
v1[c(3)]
v1[c(6)]
v1[3:5]
v1[3:6]
# 음수 값으로 첨자 지정 예
v1[-1]
v1
# 음수 값으로 첨자 지정 예
v1[-1]
# 음수 값으로 첨자 지정 예
v1[-2] # 첫번째 인덱스를 제외시키고 실행시켜라
# 음수 값으로 첨자 지정 예
v1[-8] # 첫번째 인덱스를 제외시키고 실행시켜라
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
# 음수 값으로 첨자 지정 예
v1[-8] # 첫번째 인덱스를 제외시키고 실행시켜라
# 음수 값으로 첨자 지정 예
v1[-1] # 첫번째 인덱스를 제외시키고 실행시켜라
# 음수 값으로 첨자 지정 예
v1
v1[-1] # 첫번째 인덱스를 제외시키고 실행시켜라
# -5 20 21 22 23 12 -2 -1  0  1  2  3
v1[-c(2,4)]
# -5 20 21 22 23 12 -2 -1  0  1  2  3
v1
v1[-c(2,4)]
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
library(RSADBE)            # 패키지를 메모리에 로드
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)# Structure(구조)
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 2. Matrix 자료 구조
args(matrix)
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터 이용 행렬 객체 생성
m <- vector(c(1:5))
m  # 5행 1열
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터 이용 행렬 객체 생성
m <- vector(c(1:5))
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = 1)
m
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선선
m
m <- matrix(c(1:10), byrow = T)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), byrow = T)
m
m <- matrix(c(1:10), byrow = F)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
m <- matrix(c(1:10), byrow = F)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
m <- matrix(c(1:10), byrow = T)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), ncol = 10)
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
x1
mr <- rbind(x1, x2)
mr
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- rbind(x1, x2)
mc
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, nrow = 2)
m3
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 자료와 객체 type 보기
mode(m3) #
class(m3) # numeric, matrix
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
dm(m)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터 자료 참조하기
m <- c(1:50)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
View(m)
View(m)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10)
m
m <- matrix(c(1:10))
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 1) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 행렬 객체에 첨자로 접근
m3[2,3]
m3
# 행렬 객체에 첨자로 접근
m3[2,3]
m3
m3[1,] # 1행 전체
m3[,5]
m3[1, c(2:5)]
m3[1, c(2, 5)]
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nr = 3, nc = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nro = 3, nco = 3) # nrow, ncol
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), n = 3, n = 3) # nrow, ncol
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max)
x
apply(x, 1, min)
apply(x, 2, min)
# apply() 함수 적용
apply(x, 2, max) # 1번은 행, 2번은 열 # 행 단위 최대값값
apply(x, 2, min)
apply(x, 2, mean) # 열 단위 평균값
x
apply(x, 1, mean) # 열 단위 평균값
##  - rep() 함수 이용 벡터 객체 생성
help(rep) # ?rep
example(rep)
rep(1:3, 3) # replicate(대상, 반복수)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x; y
# 숫자형, 문자형, 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v2 <- c(33, -5, 20:23, 12, "4") # 데이터를 모두 문자형으로 변환.
v2
# 한 줄에 명령문 중복 사용
v1; mode(v1) # mode()는 자료형을 반환해줌.
v2; mode(v2)
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순자", "강감촌치킨")
age
#    홍길동     이순자     강감촌치킨
#    30         35         40
age <- NULL # age 변수 데이터 삭제
age
# 벡터 자료 참조하기
a <- c(1:50)
a[10] # index : 1부터 시작
a[c(10:45)] # 10 ~ 45 사이의 벡터 원소 출력
a[c(10, 20, 30, 40)]
a[10:(length(a)-5)] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
a[10:(length(a)-5)] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
# 잘못된 벡터 첨자 사용 예
a[5, 10] # Error in a[5, 10] : incorrect number of dimensions
# c() 함수에서 콤마 사용 예
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v1[3:6] # 20 21 22 23
v1[c(4, 5:8, 9)]
# 음수 값으로 첨자 지정 예
v1
v1[-1] # 첫번째 인덱스를 제외시키고 실행시켜라 = 해당 위치의 원소를 제외한 값 출력
v1[-c(2,4)]
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
v1
v1[-c(2,4)]
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)# Structure(구조)
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 2. Matrix 자료 구조
args(matrix) # (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), byrow = T) # 주의 - 여전히 10행 1열
# (한글) nrow 또는 ncol 중 하나가 주어지지 않으면 데이터 길이와 다른 매개 변수에서 추론하려고 시도합니다. 둘 다 주어지지 않으면 한 열 행렬이 반환됩니다.
# (english) If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.
# 즉 byrow 속성은 적용되지 않음.
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3) # "numeric"
class(m3) # "matrix" "array"
# 행렬 객체에 첨자로 접근
m3[2,3] # 2행 3열의 데이터 1개 : 15
m3[1,] # 1행 전체 # 10 12 14 16 18
m3[1,] # 1행 전체 # 10 12 14 16 18
m3[,5] # 18 19
m3[1, c(2:5)] # 1행에서 2~5열까지의 데이터터 # 12 14 16 18
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개 # 12 18
m3
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max) # 1번은 행, 2번은 열 # 행 단위 최대값
apply(x, 1, min) # 행 단위 최소값
apply(x, 2, mean) # 열 단위 평균값
x
# apply() 함수 적용
apply(x, 1, max) # 1번은 행, 2번은 열 # 행 단위 최대값
apply(x, 1, min) # 행 단위 최소값
apply(x, 2, mean) # 열 단위 평균값
x
