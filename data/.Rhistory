m <- vector(c(1:5))
m  # 5행 1열
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터 이용 행렬 객체 생성
m <- vector(c(1:5))
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = 1)
m
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선선
m
m <- matrix(c(1:10), byrow = T)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), byrow = T)
m
m <- matrix(c(1:10), byrow = F)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
m <- matrix(c(1:10), byrow = F)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
m <- matrix(c(1:10), byrow = T)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = F) # 행 우선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), ncol = 10)
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
x1
mr <- rbind(x1, x2)
mr
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- rbind(x1, x2)
mc
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, nrow = 2)
m3
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3); class(m3) # numeric, matrix
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 자료와 객체 type 보기
mode(m3) #
class(m3) # numeric, matrix
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
dm(m)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터 자료 참조하기
m <- c(1:50)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
View(m)
View(m)
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10)
m
m <- matrix(c(1:10))
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 1) # 의도한 1행 10열
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
# 행렬 객체에 첨자로 접근
m3[2,3]
m3
# 행렬 객체에 첨자로 접근
m3[2,3]
m3
m3[1,] # 1행 전체
m3[,5]
m3[1, c(2:5)]
m3[1, c(2, 5)]
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nr = 3, nc = 3)
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nro = 3, nco = 3) # nrow, ncol
x
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), n = 3, n = 3) # nrow, ncol
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max)
x
apply(x, 1, min)
apply(x, 2, min)
# apply() 함수 적용
apply(x, 2, max) # 1번은 행, 2번은 열 # 행 단위 최대값값
apply(x, 2, min)
apply(x, 2, mean) # 열 단위 평균값
x
apply(x, 1, mean) # 열 단위 평균값
##  - rep() 함수 이용 벡터 객체 생성
help(rep) # ?rep
example(rep)
rep(1:3, 3) # replicate(대상, 반복수)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x; y
# 숫자형, 문자형, 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v2 <- c(33, -5, 20:23, 12, "4") # 데이터를 모두 문자형으로 변환.
v2
# 한 줄에 명령문 중복 사용
v1; mode(v1) # mode()는 자료형을 반환해줌.
v2; mode(v2)
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순자", "강감촌치킨")
age
#    홍길동     이순자     강감촌치킨
#    30         35         40
age <- NULL # age 변수 데이터 삭제
age
# 벡터 자료 참조하기
a <- c(1:50)
a[10] # index : 1부터 시작
a[c(10:45)] # 10 ~ 45 사이의 벡터 원소 출력
a[c(10, 20, 30, 40)]
a[10:(length(a)-5)] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
a[10:(length(a)-5)] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
# 잘못된 벡터 첨자 사용 예
a[5, 10] # Error in a[5, 10] : incorrect number of dimensions
# c() 함수에서 콤마 사용 예
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v1[3:6] # 20 21 22 23
v1[c(4, 5:8, 9)]
# 음수 값으로 첨자 지정 예
v1
v1[-1] # 첫번째 인덱스를 제외시키고 실행시켜라 = 해당 위치의 원소를 제외한 값 출력
v1[-c(2,4)]
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
v1
v1[-c(2,4)]
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)# Structure(구조)
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 2. Matrix 자료 구조
args(matrix) # (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), byrow = T) # 주의 - 여전히 10행 1열
# (한글) nrow 또는 ncol 중 하나가 주어지지 않으면 데이터 길이와 다른 매개 변수에서 추론하려고 시도합니다. 둘 다 주어지지 않으면 한 열 행렬이 반환됩니다.
# (english) If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.
# 즉 byrow 속성은 적용되지 않음.
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3) # "numeric"
class(m3) # "matrix" "array"
# 행렬 객체에 첨자로 접근
m3[2,3] # 2행 3열의 데이터 1개 : 15
m3[1,] # 1행 전체 # 10 12 14 16 18
m3[1,] # 1행 전체 # 10 12 14 16 18
m3[,5] # 18 19
m3[1, c(2:5)] # 1행에서 2~5열까지의 데이터터 # 12 14 16 18
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개 # 12 18
m3
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
# apply() 함수 적용
apply(x, 1, max) # 1번은 행, 2번은 열 # 행 단위 최대값
apply(x, 1, min) # 행 단위 최소값
apply(x, 2, mean) # 열 단위 평균값
x
# apply() 함수 적용
apply(x, 1, max) # 1번은 행, 2번은 열 # 행 단위 최대값
apply(x, 1, min) # 행 단위 최소값
apply(x, 2, mean) # 열 단위 평균값
x
# Day 20; 20220930
# 사용자 정의 적용
f <- function(x){ # x : 매개변수
x * c(1,2,3)
}
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 행(1) 우선 순서로 사용자 정의 함수 적용
apply(x, 1, f)
# 행(1) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 1, f)
result
# 열(2) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 2, f)
result
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 열(2) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 2, f)
result
# 행렬 객체에 컬럼명 지정하기
colnames(x) <- c('one', 'two', 'three')
x
# 행(1) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 1, f)
result
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 행(1) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 1, f)
result
# 열(2) 우선 순서로 사용자 정의 함수 적용
result <- apply(x, 2, f)
result
# 3차원 배열 객체 생성하기
vec <- c(1:12) # 12개 벡터 객체 생성
arr <- array(vec, c(3,2,2)) # 3차원일 때는 2개의 ,, 컴마가 있다. # 3행 2열 2면 만들라
arr
# 3차원 배열 객체 자료 조회
hist(arr)
# 3차원 배열 객체 자료 조회
arr[2,1,2]
arr[,,1]
arr[2,,1]
# 배열 자료형과 자료 구조
mode(arr); class(arr)
# 데이터 셋 가져오기
library(RSADBE)
data(Bug_Metrics_Software)
str(Bug_Metrics_Software)
# 데이터 셋 자료보기
Bug_Metrics_Software
# 데이터 셋 자료보기
Bug_Metrics_Software
# 데이터 셋 가져오기
library(RSADBE)
data(Bug_Metrics_Software)
str(Bug_Metrics_Software)
# 데이터 셋 자료보기
Bug_Metrics_Software
str(Bug_Metrics_Software)
hist(Bug_Metrics_Software)
stars(Bug_Metrics_Software)
boxplot(Bug_Metrics_Software)
scatterplot3d(Bug_Metrics_Software)
data(iris) #데이터 불러오기
# 데이터 셋 가져오기
library(iris)
# 패키지 설치와 메모리 로딩
install.packages("iris") # 패키지(데이터) 설치
library(iris)            # 패키지를 메모리에 로드
data(iris)
head(iris, 3)
scatterplot3d()
library(scatterplot3d)
data(scatterplot3d)
# 패키지 설치와 메모리 로딩
install.packages("scatterplot3d") # 패키지(데이터) 설치
library(scatterplot3d)            # 패키지를 메모리에 로드
scatterplot3d()
scatterplot3d(iris[,1:3],)
scatterplot3d(Bug_Metrics_Software)
scatterplot3d(Bug_Metrics_Software,,)
scatterplot3d(Bug_Metrics_Software[,1:3],)
scatterplot3d(Bug_Metrics_Software,,)
scatterplot3d(iris[,1:3],)
scatterplot3d(iris[,1:9],)
# key를 이용하여 value에 접근하기
member <- list(arr)
member
# key를 이용하여 value에 접근하기
member <- list(name=c("홍길동", "유관순"),
age=c(35, 25),
address=c("제주도","천국"))
member
# key를 이용하여 value에 접근하기
member <- list(name=c("홍길동", "유관순"),
age=c(35, 25),
address=c("제주도","천국"),
gender=c("남자","여자"),
htype="아파트","왕국")
member
# key를 이용하여 value에 접근하기
member <- list(name=c("홍길동", "유관순"),
age=c(35, 25),
address=c("제주도","천국"),
gender=c("남자","여자"),
htype="아파트","왕국"))
# key를 이용하여 value에 접근하기
member <- list(name=c("홍길동", "유관순"),
age=c(35, 25),
address=c("제주도","천국"),
gender=c("남자","여자"),
htype=c("아파트","왕국"))
member
hist(member)
# key를 이용하여 value에 접근하기
member$name
member$name[1]
member$name[2]
member$name[3] <- "이명박박"
member$name[3] <- "이명박"
member$age <- 45
member$age
member$age
member
member$id <- c("hong","yu")
# 1개 값을 갖는 리스트 객체 생성
list <-
list
member
member$age <- null
member$age <- NULL
member
# 1개 값을 갖는 리스트 객체 생성
list <- list("lee","이명박",70)
list
"""
[[1]]         ----------------------> key(생략) [[n]]
[1] "lee"     ----------------------> value[n]
# 1개 이상의 값을 갖는 리스트 객체 생성
num <- list(c(1:5), c(6:10))
num
# 리스트 자료구조 -> 벡터 구조로 변경하기
unlist <- unlist(num)
unlist
# 리스트 객체에 함수 적용하기
# list data 처리 함수
a <- list(c(1:5))
b <- list(c(6:10))
a; b
c(a,b)
class(a)
lapply(c(a,b))
c
c <- lapply(c(a,b), max) # list로 결과 반환
c
mode(c); class(c)  # "list" "list"
# 리스트 형식을 벡터 형식으로 반환하기
c <- sapply(c(a,b), max)
c
mode(c); class(c) # "numeric" "integer"
# 리스트 형식을 벡터(1차원) 형식으로 반환하기
c <- sapply(c(a,b), max)
c
mode(c); class(c) # 자료형:"numeric", 자료구조:"integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list(10,20,30), list(100,200,300))
multi_list
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
multi_list$c1:c3
mode(multi_list); class(multi_list)
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list(10,20,30), list(100,200,300))
multi_list
mode(multi_list); class(multi_list)
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
mode(multi_list); class(multi_list)
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
d <- do.call(rbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동","이순신","강감찬")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("베드로","요한","야고보")
pay <- c(150,250,300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
