iris_setosa$Sepal.Length,
iris_setosa$Sepal.Width,
bg='orange', pch=21) # 타원 산점도
d3$points3d(iris_versicolor$Petal.Length,
iris_versicolor$Sepal.Length,
iris_versicolor$Sepal.Width,
bg='blue', pch=23) # 마름모꼴 산점도
d3$points3d(iris_virginica$Petal.Length,
iris_virginica$Sepal.Length,
iris_virginica$Sepal.Width,
bg='green', pch=25) # 역삼각형 산점도
d3 <- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type = 'p') # type : h->수직선, p->점, l->선
# 3차원 산점도 시각화
d3$points3d(iris_setosa$Petal.Length,
iris_setosa$Sepal.Length,
iris_setosa$Sepal.Width,
bg='orange', pch=21) # 타원 산점도
d3$points3d(iris_versicolor$Petal.Length,
iris_versicolor$Sepal.Length,
iris_versicolor$Sepal.Width,
bg='blue', pch=23) # 마름모꼴 산점도
d3$points3d(iris_virginica$Petal.Length,
iris_virginica$Sepal.Length,
iris_virginica$Sepal.Width,
bg='green', pch=25) # 역삼각형 산점도
d3 <- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type = 'n') # type : h->수직선, p->점, l->선
# 3차원 산점도 시각화
d3$points3d(iris_setosa$Petal.Length,
iris_setosa$Sepal.Length,
iris_setosa$Sepal.Width,
bg='orange', pch=21) # 타원 산점도
d3$points3d(iris_versicolor$Petal.Length,
iris_versicolor$Sepal.Length,
iris_versicolor$Sepal.Width,
bg='blue', pch=23) # 마름모꼴 산점도
d3$points3d(iris_virginica$Petal.Length,
iris_virginica$Sepal.Length,
iris_virginica$Sepal.Width,
bg='green', pch=25) # 역삼각형 산점도
install.packages(c("dplyr", "hflights"))
library(dplyr)
library(hflights)
install.packages(c("dplyr", "hflights"))
install.packages(c("dplyr", "hflights"))
library(dplyr)
library(hflights)
hflights
str(hflights) # 'data.frame':	227496 obs. of  21 variables:
hflights
str(hflights) # 'data.frame':	227496 obs. of  21 variables:
# 1.1 콘솔 창의 크기에 맞게 데이터 추출
#   : 콘솔 창 안에서 한 눈으로 파악하기
hflights_df <- tbl_df(hflights)
hflights_df
view(hflights)
View(hflights)
# 1.1 콘솔 창의 크기에 맞게 데이터 추출
#   : 콘솔 창 안에서 한 눈으로 파악하기
hflights_df <- tbl_df(hflights)
hflights_df
# hflights_df를 대상으로 1월2일 데이터 추출하기.
filter(hflights_df, Month==1 & DayofMonth==2) # AND
# 1월 혹은 2월 데이터 추출
filter(hflights_df, Month==1 | Month==2) # OR
# 1.3 컬럼으로 데이터 정렬
# 년, 월, 출발시간, 도착시간 순으로 오름차순 정렬
arrange(hflights_df, Year, Month, DepTime, ArrTime)
# 년, 월, 출발시간, 도착시간 순으로 내림차순 정렬
arrange(hflights_df, Year, Month, desc(DepTime), ArrTime)
# 1.4 컬럼으로 데이터 검색
# hflights_df에서 년, 월, 출발시간, 도착시간 컬럼 검색하기.
select(hflights_df, Year, Month, DepTime, ArrTime) # 4개의 컬럼 선택.
# 컬럼의 범위 지정하기.
select(hflights_df, Year:ArrTime)
# hflights_df를 대상으로 1월2일 데이터 추출하기.
filter(hflights_df, Month==1 & DayofMonth==2) # AND
# 1월 혹은 2월 데이터 추출
filter(hflights_df, Month==1 | Month==2) # OR
# 1.3 컬럼으로 데이터 정렬
# 년, 월, 출발시간, 도착시간 순으로 오름차순 정렬
arrange(hflights_df, Year, Month, DepTime, ArrTime)
# 1.3 컬럼으로 데이터 정렬
# 년, 월, 출발시간, 도착시간 순으로 오름차순 정렬
arrange(hflights_df, Year, Month, DepTime, ArrTime)
# 년, 월, 출발시간, 도착시간 순으로 내림차순 정렬
arrange(hflights_df, Year, Month, desc(DepTime), ArrTime)
# 1.4 컬럼으로 데이터 검색
# hflights_df에서 년, 월, 출발시간, 도착시간 컬럼 검색하기.
select(hflights_df, Year, Month, DepTime, ArrTime) # 4개의 컬럼 선택.
# 컬럼의 범위 지정하기.
select(hflights_df, Year:ArrTime)
# 컬럼의 범위 제외 : Year부터 DayOfWeek 제외
select(hflights_df, -(Year:DayOfWeek))
# 출발 지연 시간과 도착 지연 시간과의 차이를 계산하는 컬럼 추가하기.
mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain/(AirTime/60))
# mutate() 함수에 의해서 추가된 컬럼 보기
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain/(AirTime/60)),
Year, Month, ArrDelay, DepDelay, gain, gain_per_hour)
# 비행시간 평균 계산하기.
summarise(hflights_df, avgAirTime=mean(AirTime, na.rm = T))
# 데이터 셋의 관측치 길이, 출발 지연 시간 평균 구하기
summarise(hflights_df, cnt=n(), delay=mean(DepDelay, na.rm = T))
# 도착시간(ArrTime)의 표준편차와 분산 계산하기
summarise(hflights_df, arrTimeSd=sd(ArrTime, na.rm = T),
arrTimeVar=var(ArrTime, na.rm = T))
# 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
# 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
str(species)
species
planes <- group_by(hflights_df, TailNum) # TailNum(항공기 일련번호)
delay <- summarise(planes, count=n(), dist=mean(Distance, na.rm = T), delay=mean(ArrDelay, na.rm = T))
delay <- filter(delay, count > 20, dist < 2000)
install.packages("ggplot2")
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size=count), alpha=1/2) +
geom_smooth() +
scale_size_area()
# 파이프(pipe)연산자 이용하기
getwd()
setwd("C:/workspaces/Rwork/src/data")
exam <- read.csv("csv_exam.csv")
exam
planes <- group_by(hflights_df, TailNum) # TailNum(항공기 일련번호)
delay <- summarise(planes, count=n(), dist=mean(Distance, na.rm = T), delay=mean(ArrDelay, na.rm = T))
delay <- filter(delay, count > 20, dist < 2000)
delay
# 파이프(pipe)연산자 이용하기
getwd()
setwd("C:/workspaces/Rwork/src/data")
# 파이프(pipe)연산자 이용하기
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
exam <- read.csv("csv_exam.csv")
exam
# filter()
# %>% : 파이프(pipe) 연산자 -> 단축키(ctl+shift+m)
exam %>% filter(class==1) # filter(exam, class==1)
# select()
exam %>% select(class, math, english)
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class==1) %>% select(english)
# 혹은
exam %>%
filter(class==1) %>%
select(english)
# select()
exam %>% select(class, math, english)
# filter()
# %>% : 파이프(pipe) 연산자 -> 단축키(ctl+shift+m)
exam %>% filter(class==1) # filter(exam, class==1)
# select()
exam %>% select(class, math, english)
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class==1) %>% select(english)
# 혹은
exam %>%
filter(class==1) %>%
select(english)
# 주의
exam
# 과목별 총점과 총점 기준 정렬해서 상위 6개(head실행) 데이터만을  출력.
exam %>%
mutate(total=math+english+science) %>%
arrange(desc(total)) %>%
head
# join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 2:6, z = rnorm(5))
df1; df2
# join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5)) # 정규분포 rnorm
df2 <- data.frame(x = 2:6, z = rnorm(5)) # 정규분포를 따르는 데이터셋에서 5개를 random으로 꺼내라
df1; df2
# inner_join 하기
inner_join(df1, df2, by = 'x') # x를 기준으로 해서 join해라
left_join(df1, df2, by = 'x')
right_join(df1, df2, by = 'x')
full_join(df1, df2, by = 'x')
# inner_join 하기
inner_join(df1, df2, by = 'x') # x를 기준으로 해서 join해라
left_join(df1, df2, by = 'x')
right_join(df1, df2, by = 'x')
full_join(df1, df2, by = 'x')
# 두 개의 데이터프레임을 행 단위로 합치기
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))
df1; df2
# inner_join 하기
inner_join(df1, df2, by = 'x') # x를 기준으로 해서 join해라
left_join(df1, df2, by = 'x')
right_join(df1, df2, by = 'x')
full_join(df1, df2, by = 'x')
# join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5)) # 정규분포 rnorm
df2 <- data.frame(x = 2:6, z = rnorm(5)) # 정규분포를 따르는 데이터셋에서 5개를 random으로 꺼내라
df1; df2
# inner_join 하기
inner_join(df1, df2, by = 'x') # x를 기준으로 해서 join해라
left_join(df1, df2, by = 'x')
right_join(df1, df2, by = 'x')
full_join(df1, df2, by = 'x')
# 두 개의 데이터프레임을 행 단위로 합치기
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))
df1; df2
# 데이터프레임 행단위 합치기
bind_rows(df1, df2)
# 데이터프레임 열단위 합치기
bind_cols(df1, df2)
df1; df2
# 데이터프레임 행단위 합치기
bind_rows(df1, df2)
# 데이터프레임 열단위 합치기
bind_cols(df1, df2)
df1; df2
# 데이터프레임 행단위 합치기
bind_rows(df1, df2)
# 데이터프레임 열단위 합치기
bind_cols(df1, df2)
# 데이터프레임 행단위 합치기
bind_rows(df1, df2)
# 데이터프레임 열단위 합치기
bind_cols(df1, df2)
# 패키지 설치
install.packages('reshape2')
library(reshape2)
# 데이터 가져오기
getwd()
data <- read.csv("data.csv")
data
View(data)
# 긴 형식 -> 넓은 형식으로 변경
help(dcast)
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
View(wide)
View(data)
View(data)
wide <- dcast(data, Customer_ID ~ Date, sum) # sum이 총합
wide
View(wide)
# 파일 저장 및 읽기
setwd("D:/heaven_dev/workspaces/R/output")
write.csv(wide, 'wide.csv', row.names = F)
wide_read <- read.csv('wide.csv')
colnames(wide_read) <- c('id','day1','day2','day3','day4','day5','day6','day7')
wide_read
# melt() 함수 이용
long <- melt(wide_read, id='id')
long
wide_read
# 컬럼명 수정
colnames(long) <- c("id", "Date", "Buy")
head(long)
# reshape2 패키지의 smiths 데이터 셋 구조 변경하기
data("smiths")
smiths
# wide -> long
long <- melt(smiths, id=1:2)
long
# long -> wide
dcast(long, subject + time ~ ...)
# airquality 데이터 셋 구조 변경
data("airquality") # New York의 대기에 대한 질
View(airquality)
str(airquality) # 'data.frame':	153 obs. of  6 variables:
# 컬럼명 대문자 일괄 변경
names(airquality) <- toupper(names(airquality)) # 컬럼명 대문자 변경.
head(airquality)
# 일과 월 컬럼으로 variable 컬럼을 3차원 형식으로 분류
names(air_melt) <- tolower(names(air_melt)) # 컬럼명 소문자 변경
# 월과 일 컬럼으로 나머지 4개 컬럼을 묶어서 긴 형식 변경
air_melt <- melt(airquality, id=c("MONTH", "DAY"), na.rm = T)
head(air_melt) # MONTH DAY variable value
# 일과 월 컬럼으로 variable 컬럼을 3차원 형식으로 분류
names(air_melt) <- tolower(names(air_melt)) # 컬럼명 소문자 변경
acast <- acast(air_melt, day~month~variable) # 3차원 구조 변경
acast
class(acast) # "array"
# 월 단위 variable(대기관련 컬럼) 컬럼 합계
acast(air_melt, month~variable, sum)
# 데이터 가져오기
setwd("D:/heaven_dev/workspaces/R/data")
dataset <- read.csv("dataset.csv", header = T) # 헤더가 있는 경우
View(dataset)
# 데이터의 앞부분과 뒷부분 보기
head(dataset, 10)
tail(dataset)
# 전체 데이터 보기
print(dataset) # 콘솔창 출력
# 데이터 셋 구조
names(dataset) # 변수명(컬럼) # feature이름 출력
attributes(dataset) # $names / $class / $row.names
str(dataset) # 데이터 구조보기(자료구조/관측치(행)/컬럼명(열) / 자료형)
# 1.3 데이터 셋 조회
dataset$age  # 데이터 셋 접근 방법.
dataset$resident
length(dataset) # 7 : 컬럼의 갯수
length(dataset$age) # 300 : 행(데이터)의 갯수
# 조회 결과 변수 저장
x <- dataset$gender
y <- dataset$price
# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견
# 산점도 형태로 변수 조회
plot(dataset$price)
# ["컬럼명"] 형식으로 특정 변수 조회
dataset["gender"] # dataset$gender
dataset["price"]
str(dataset) # 데이터 구조보기(자료구조/관측치(행)/컬럼명(열) / 자료형)
# 1.3 데이터 셋 조회
dataset$age  # 데이터 셋 접근 방법.
dataset$resident
length(dataset) # 7 : 컬럼의 갯수
length(dataset$age) # 300 : 행(데이터)의 갯수
# 조회 결과 변수 저장
x <- dataset$gender
y <- dataset$price
# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견
# 조회 결과 변수 저장
x <- dataset$gender
y <- dataset$price
# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견
# 산점도 형태로 변수 조회
plot(dataset$price)
# ["컬럼명"] 형식으로 특정 변수 조회
dataset["gender"] # dataset$gender
dataset["price"]
# 조회 결과 변수 저장
x <- dataset$gender
y <- dataset$price
# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견
# 산점도 형태로 변수 조회
plot(dataset$price)
y <- dataset$price
# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견
# 산점도 형태로 변수 조회
plot(dataset$price)
# ["컬럼명"] 형식으로 특정 변수 조회
dataset["gender"] # dataset$gender
dataset["price"]
# [색인(index)] 형식으로 변수 조회
dataset[2] # 두번째 컬럼(gender) - 출력형태:열 중심
dataset[6] # price
dataset[3,] # 3행 전체
dataset[,3] # 3열 전체
# ["컬럼명"] 형식으로 특정 변수 조회
dataset$gender
dataset["gender"] # dataset$gender
dataset["price"]
# ["컬럼명"] 형식으로 특정 변수 조회
dataset$gender
dataset["gender"] # dataset$gender
dataset["price"]
# [색인(index)] 형식으로 변수 조회
dataset[2] # 두번째 컬럼(gender) - 출력형태:열 중심
dataset[6] # price
dataset[3,] # 3행 전체
dataset[,3] # 3열 전체
dataset[3,] # 3행 전체
dataset[,3] # 3열 전체
# 두 개 이상의 [색인(index)] 형식으로 변수 조회
dataset[c("job", "price")]
dataset[c(2, 6)] # gender / price
dataset[c("job", "price")]
dataset[c("job", "price")]
dataset[c(1, 2, 3)] # resident/gender/job
dataset[c(1:3)]
dataset[1:3]
dataset[c(2,4:6,3,1)] # gender age position  price job resident # 순서를 바꿔서 가져올 수도 있다.
dataset[-c(2)] # dataset[c(1, 3:7)]
dataset[-c(2)] # dataset[c(1, 3:7)]
# dataset의 특정 행/열을 조회하는 경우
dataset[,c(2:4)]
dataset[c(2:4),]
dataset[-c(1:100),]
# summary() 함수 이용
summary(dataset$price)
sum(dataset$price) # NA
# summary() 함수 이용
summary(dataset$price)
sum(dataset$price) # NA
# sum() 함수에서 제공되는 속성 이용
sum(dataset$price, na.rm = T) # 2362.9
sum(dataset$price) # NA
# 결측데이터 제거 함수 이용
price2 <- na.omit(dataset$price)
sum(price2)
length(price2) # 270
# 결측데이터 제거 함수 이용
price2 <- na.omit(dataset$price)
sum(price2)
length(price2) # 270
# 결측치를 평균으로 대체하기
x <- dataset$price # price vector 생성
head(x)
dataset$price3 <- ifelse(!is.na(x), x, round(mean(x,na.rm=T),2)) # 평균으로 대체
View(dataset)
sum(dataset$price2) # 2362.9
# 결측치를 0으로 대체하기
x <- dataset$price # price vector 생성
head(x)
dataset$price2 <- ifelse(!is.na(x), x, 0) # 0으로 대체
View(dataset)
sum(dataset$price2) # 2362.9
sum(dataset$price2) # 2362.9
# 범주형 변수의 이상치 확인
table(dataset$gender)
pie(table(dataset$gender)) # 파이차트
# subset() 함수를 이용한 데이터 정제하기
dataset <- subset(dataset, gender==1 | gender==2)
dataset
length(dataset$gender) # 297
pie(table(dataset$gender))
table(dataset$gender)
# 3.2 연속형 변수의 이상치 처리.
dataset <- read.csv('dataset.csv', header = T)
View(dataset)
dataset$price # 세부데이터 보기
plot(dataset$price)
summary(dataset$price)
plot(dataset$price)
summary(dataset$price)
# price 변수의 데이터 정제와 시각화
dataset2 <- subset(dataset, price >= 2 & price <= 8)
length(dataset2$price) # 251
stem(dataset2$price) # 줄기와 잎 도표 보기
# price 변수의 데이터 정제와 시각화
dataset2 <- subset(dataset, price >= 2 & price <= 8)
length(dataset2$price) # 251
stem(dataset2$price) # 줄기와 잎 도표 보기
# age 변수에서 NA 발견
summary(dataset2$age) # NA's -> 16
boxplot(dataset2$age)
# 4.1 가독성을 위한 코딩 변경
table(dataset2$resident)
dataset2$resident2[dataset2$resident == 1] <- '1. 서울특별시'
dataset2$resident2[dataset2$resident == 2] <- '2. 인천광역시'
dataset2$resident2[dataset2$resident == 3] <- '3. 대전광역시'
dataset2$resident2[dataset2$resident == 4] <- '4. 대구광역시'
dataset2$resident2[dataset2$resident == 5] <- '5. 시구군'
dataset2[c("resident","resident2")]
View(dataset2)
View(dataset2$resident)
View(dataset2)
# job 컬럼을 대상으로 코딩 변경하기
dataset2$job2[dataset2$job == 1] <- '공무원'
dataset2$job2[dataset2$job == 2] <- '회사원'
dataset2$job2[dataset2$job == 3] <- '개인사업'
dataset2[c("job","job2")]
View(dataset2)
# 나이(age) 변수를 청년층, 중년층, 장년층으로 코딩 변경하기.
dataset2$age2[dataset2$age <= 30] <- "청년층"
dataset2$age2[dataset2$age > 30 & dataset2$age <= 55] <- "중년층"
dataset2$age2[dataset2$age > 55] <- "장년층"
# 만족도(survey)를 긍정순서로 역코딩
survey <- dataset2$survey
csurvey <- 6-survey # 역코딩
csurvey
dataset2$survey2 <- csurvey
mean(dataset2$survey2, na.rm = T) # 3.358566
# 만족도(survey)를 긍정순서로 역코딩
survey <- dataset2$survey
csurvey <- 6-survey # 역코딩 # 만족과 불만족 점수를 뒤바꿔서 만족을 강조하고자 6을 빼줌
csurvey
dataset2$survey2 <- csurvey
mean(dataset2$survey2, na.rm = T) # 3.358566
dataset2$survey2 <- csurvey
mean(dataset2$survey2, na.rm = T) # 3.358566
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T)
View(new_data)
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T)
View(new_data)
new_data <- read.csv("new_data.csv", header = T, encoding="UTF-8")
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T, encoding="UTF-8")
View(new_data)
## 성별에 따른 거주지역 분포 현황
resident_gender <- table(new_data$resident2, new_data$gender2)
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T, fileEncoding = "CP949", encoding="UTF-8")
View(new_data)
View(new_data)
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T, encoding="UTF-8")
View(new_data)
# 5.1 범주형 vs 범주형
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
new_data <- read.csv("new_data.csv", header = T)
View(new_data)
