string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan(10,20,30)
num
# 키보드로 문자 입력하기
name <- scan(what = character())
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
df <- edit(df)
df <- edit(df)
# 키보드로 숫자 입력하기
num <- scan()
10 20 30
num
# 키보드로 숫자 입력하기
num <- scan()
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
df <- edit(df)
df
df <- edit(df)
df <- edit(df)
student <- read.table(file = "student.txt")
student
mode(student); class(student)
df
student <- read.table(file = "student.txt")
student
df <- edit(df)
df
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file = "student2.txt", sep = ";", header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file = "student3.txt", header = T, na.strings = "-")
student3
# 키보드로 숫자 입력하기
num <- scan()
# 키보드로 숫자 입력하기
num <- scan()
num
# 합계 구하기
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성성
df <- edit(df)
df
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
setwd("D:/heaven_dev/workspaces/R/data")
student <- read.table(file = "student.txt")
student
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file = "student1.txt", header = T )
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file = "student2.txt", sep = ";", header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file = "student3.txt", header = T, na.strings = "-")
student3
# 키보드로 문자 입력하기
name <- scan(what = character())
name
example(rep)
rep(1:3, 3) # replicate(대상, 반복수)
# 1 2 3 1 2 3 1 2 3
rep(1:3, each=3)
# union(), setdiff(), intersect() 함수 이용
x <- c(1, 3, 5, 7)
y <- c(3, 5)
x; y
union(x, y)     # 합집합(x+y) # 1 3 5 7
setdiff(x, y)   # 차집합(x-y) # 1 7
intersect(x, y) # 교집합(x^y) # 3 5
# 숫자형, 문자형, 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3) # 33 -5 20 21 22 23 12 -2 -1  0  1  2  3
v1
v2 <- c(33, -5, 20:23, 12, "4") # 데이터를 모두 문자형으로 변환. # "33" "-5" "20" "21" "22" "23" "12" "4"
v2
# 한 줄에 명령문 중복 사용
v1; mode(v1) # mode()는 자료형을 반환해줌.
v2; mode(v2)
# 벡터에 컬럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순자", "강감촌치킨")
age
#    홍길동     이순자     강감촌치킨
#    30         35         40
age <- NULL # age 변수 데이터 삭제
age
# 벡터 자료 참조하기
a <- c(1:50)
a[10] # index : 1부터 시작
a[c(10:45)] # 10 ~ 45 사이의 벡터 원소 출력
a[c(10, 20, 30, 40)]
a[10:(length(a)-5)] # 모든 함수가 올 수 있다. 그것을 예상하고 있어야 한다.
# 잘못된 벡터 첨자 사용 예
a[5, 10] # Error in a[5, 10] : incorrect number of dimensions
# c() 함수에서 콤마 사용 예
v1 <- c(33, -5, 20:23, 12, -2:3)
v1
v1[3:6] # 20 21 22 23
v1[c(4, 5:8, 9)]
# 음수 값으로 첨자 지정 예
v1
v1[c(4, 5:8, 9)]
# 음수 값으로 첨자 지정 예
v1
v1[-1] # 첫번째 인덱스를 제외시키고 실행시켜라 = 해당 위치의 원소를 제외한 값 출력
# -5 20 21 22 23 12 -2 -1  0  1  2  3
v1
v1[-c(2,4)]
# 패키지 설치와 메모리 로딩
install.packages("RSADBE") # 패키지(데이터) 설치
library(RSADBE)            # 패키지를 메모리에 로드
data("Severity_Counts")    # RSADBE 패키지에서 제공되는 데이터 셋 가져오기.
str(Severity_Counts)# Structure(구조)
# 패키지에서 제공되는 벡터데이터 셋 보기
Severity_Counts
# 2. Matrix 자료 구조
args(matrix) # (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
# 벡터 이용 행렬 객체 생성
m <- matrix(c(1:5))
m  # 5행 1열
# 벡터의 열 우선으로 행렬 객체 생성
?matrix
m <- matrix(c(1:10), nrow = 2) # 2행 5열
m
# 행과 열의 수가 일치하지 않는 경우 예
m <- matrix(c(1:11), nrow = 2)
m
# 벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:11), nrow = 2, byrow = T) # 행 우선
m
m <- matrix(c(1:10), byrow = T) # 주의 - 여전히 10행 1열
# (한글) nrow 또는 ncol 중 하나가 주어지지 않으면 데이터 길이와 다른 매개 변수에서 추론하려고 시도합니다. 둘 다 주어지지 않으면 한 열 행렬이 반환됩니다.
# (english) If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.
# 즉 byrow 속성은 적용되지 않음.
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열 # 1    2    3    4    5    6    7    8    9    10
m <- matrix(c(1:10), byrow = T) # 주의 - 여전히 10행 1열
# (한글) nrow 또는 ncol 중 하나가 주어지지 않으면 데이터 길이와 다른 매개 변수에서 추론하려고 시도합니다. 둘 다 주어지지 않으면 한 열 행렬이 반환됩니다.
# (english) If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.
# 즉 byrow 속성은 적용되지 않음.
m
# (한글) nrow 또는 ncol 중 하나가 주어지지 않으면 데이터 길이와 다른 매개 변수에서 추론하려고 시도합니다. 둘 다 주어지지 않으면 한 열 행렬이 반환됩니다.
# (english) If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.
# 즉 byrow 속성은 적용되지 않음.
m
m <- matrix(c(1:10), ncol = 10) # 의도한 1행 10열 # 1    2    3    4    5    6    7    8    9    10
m
# 행 묶음으로 행렬 객체 생성
x1 <- c(5, 40, 50:52)
x2 <- c(30, 5, 6:8)
mr <- rbind(x1, x2)
mr
# 열 묶음으로 행렬 객체 생성
mc <- cbind(x1, x2)
mc
# 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2)
m3
# 자료와 객체 type 보기
mode(m3) # "numeric"
class(m3) # "matrix" "array"
# 행렬 객체에 첨자로 접근
m3[2,3] # 2행 3열의 데이터 1개 : 15
m3[1,] # 1행 전체 # 10 12 14 16 18
m3[,5] # 18 19
m3[1, c(2:5)] # 1행에서 2~5열까지의 데이터터 # 12 14 16 18
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개 # 12 18
m3
m3[1, c(2:5)] # 1행에서 2~5열까지의 데이터터 # 12 14 16 18
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개 # 12 18
m3
m3[1, c(2:5)] # 1행에서 2~5열까지의 데이터터 # 12 14 16 18
m3[1, c(2, 5)] # 1행에서 2열, 5열 데이터 2개 # 12 18
m3
# 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow = 3, ncol = 3) # nrow, ncol, nro, nco, nr, nc 모두 가능하다. 하지만 n, n은 안 된다.
x
# 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열 / 행 수
install.packages("stringr")
library(stringr)
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
num_gdp
GDP_ranking16$GDP <- num_gdp
# 단계2 : 세계 GDP 상위 16위 국가 막대 차트 시각화
gdp <- GDP_ranking16$GDP
nation <- GDP_ranking16$Nation
gdp
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
num_gdp
GDP_ranking16$GDP <- num_gdp
# 막대차트 시각화
barplot(GDP_ranking16$GDP, col = rainbow(16),
xlab = '국가(nation)', ylab='단위(달러)', names.arg=nation)
# 단계1 : 세계 GDP 순위 데이터 가져오기
GDP_ranking <- read.csv("https://databank.worldbank.org/data/download/GDP.csv", encoding = "UTF-8")
GDP_ranking
head(GDP_ranking, 20)
dim(GDP_ranking)
# 데이터를 가공하기 위해 불필요한 행과 열을 제거한다.
GDP_ranking2 <- GDP_ranking[-c(1:4), c(1,2,4,5)] # 1~4행까지는 빼겠다. 1,2,4,5 열만 보이겠다
head(GDP_ranking2)
# 상위 16개 국가 선별한다.
GDP_ranking16 <- head(GDP_ranking2, 16) # 상위 16개 국가
GDP_ranking16
# 데이터프레임을 구성하는 4개의 열에 대한 이름을 지정한다.
names(GDP_ranking16) <- c('Code', 'Ranking', 'Nation', 'GDP')
GDP_ranking16
dim(GDP_ranking16)
# 단계2 : 세계 GDP 상위 16위 국가 막대 차트 시각화
gdp <- GDP_ranking16$GDP
nation <- GDP_ranking16$Nation
gdp
install.packages("stringr")
library(stringr)
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
library(xlsx) # excel data 입출력 함수 제공
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studentx.xlsx") # excel 형식으로 저장
source("D:/heaven_dev/workspaces/R/src/chap03_DataIO.R", encoding = 'UTF-8', echo=TRUE)
write.csv(st.df, "stdf.scv",row.names = F, quote = F)
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studentx.xlsx") # excel 형식으로 저장
setwd("D:/heaven_dev/workspaces/R/output")
# 2-2. 파일에 데이터 저장
#  1) sink() 함수를 이용한 파일 저장
getwd()
write.xlsx(st.df, "studentx.xlsx") # excel 형식으로 저장
write.csv(st.df, "stdf.scv",row.names = F, quote = F)
# ?궛?닠?뿰?궛?옄
num1 <- 100 # ?뵾?뿰?궛?옄1
num2 <- 20  # ?뵾?뿰?궛?옄2
result <- num1 + num2  # ?뜤?뀍
result
result <- num1 - num2  # 類꾩뀍
result
result <- num1 * num2  # 怨깆뀍
result
result <- num1 / num2  # ?굹?닓?뀍
result
result <- num1 %% num2  # ?굹癒몄? ?뿰?궛?옄
result
result <- num1 %% num2  # 나머지 연산자
result
result <- num1^2   # 제곱연산자(num1 ** 2)
result
result <- num1^num2   # 100의 20승(10의 40승과 동일한 결과)
result   # [1] 1e+40 -> 1 * 10^40
# 비교(관계) 연산자
# (1) 동등비교
boolean <- num1 == num2 # 두 변수의 값이 같은지 비교
boolean
boolean <- num1 != num2 # 두 변수의 값이 다른지 비교
boolean
# (2) 크기비교
boolean <- num1 > num2
boolean
boolean <- num1 >= num2
boolean
boolean <- num1 < num2
boolean
boolean <- num1 <= num2
boolean
# 비교(관계) 연산자
# (1) 동등비교
boolean <- num1 == num2 # 두 변수의 값이 같은지 비교
boolean
boolean <- num1 != num2 # 두 변수의 값이 다른지 비교
boolean
# (2) 크기비교
boolean <- num1 > num2
boolean
boolean <- num1 >= num2
boolean
boolean <- num1 < num2
boolean
boolean <- num1 <= num2
boolean
# 논리 연산자
logical <- num1 >= 50 & num2 <= 10
logical
logical <- num1 >= 50 | num2 <= 10
logical
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
logical <- num1 >= 50
logical
logical <- !(num1 >= 50)
logical
# 논리 연산자
logical <- num1 >= 50 & num2 <= 10
logical
logical <- num1 >= 50 | num2 <= 10
logical
logical <- num1 >= 50
logical
logical <- !(num1 >= 50)
logical
# 1) if()
x <- 10
y <- 5
z <- x * y
z
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
# 학점 구하기
score <- scan()
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
z
# 1) if()
x <- 10
y <- 5
z <- x * y
z
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
# 학점 구하기
score <- scan()
score
if(score >= 90){ # 조건식1
result = "A학점"
}else if(score >= 80){ # 조건식1
result = "B학점"
}else if(score >= 70){ # 조건식2
result = "C학점"
}else if(score >= 60){ # 조건식3
result = "D학점"
}else{
result = "F학점"
}
cat("당신의 학점은 ", result) # 당신의 학점은?
print(result)
# 2) ifelse(조건, 참, 거짓) - 3항 연산자 기능
# <JAVA에서는> (boolean)? true:false ;
score <- c(78, 95, 85, 65)
score
ifelse(score >= 80, "우수", "노력")
install.packages("xlsx")  # xlsx 패키지 설치
dim(GDP_ranking)
# 단계1 : 세계 GDP 순위 데이터 가져오기
GDP_ranking <- read.csv("https://databank.worldbank.org/data/download/GDP.csv", encoding = "UTF-8")
GDP_ranking
head(GDP_ranking, 20)
.dim(GDP_ranking)
dim(GDP_ranking)
# 데이터프레임을 구성하는 4개의 열에 대한 이름을 지정한다.
names(GDP_ranking16) <- c('Code', 'Ranking', 'Nation', 'GDP')
GDP_ranking16
dim(GDP_ranking16)
# 데이터를 가공하기 위해 불필요한 행과 열을 제거한다.
GDP_ranking2 <- GDP_ranking[-c(1:4), c(1,2,4,5)] # c(1~4행까지는 빼겠다), 1,2,4,5 열만 보이겠다
head(GDP_ranking2)
# 상위 16개 국가 선별한다.
GDP_ranking16 <- head(GDP_ranking2, 16) # 상위 16개 국가
GDP_ranking16
# 데이터프레임을 구성하는 4개의 열에 대한 이름을 지정한다.
names(GDP_ranking16) <- c('Code', 'Ranking', 'Nation', 'GDP')
GDP_ranking16
dim(GDP_ranking16)
# 단계2 : 세계 GDP 상위 16위 국가 막대 차트 시각화
gdp <- GDP_ranking16$GDP
nation <- GDP_ranking16$Nation
gdp
install.packages("stringr")
library(stringr)
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
num_gdp
# 막대차트 시각화
barplot(GDP_ranking16$GDP, col = rainbow(16),
xlab = '국가(nation)', ylab='단위(달러)', names.arg=nation)
GDP_ranking16$GDP <- num_gdp
# 막대차트 시각화
barplot(GDP_ranking16$GDP, col = rainbow(16),
xlab = '국가(nation)', ylab='단위(달러)', names.arg=nation)
# 1,000단위 축소
num_gdp2 <- num_gdp / 1000
GDP_ranking16$GDP2 <- num_gdp2
barplot(GDP_ranking16$GDP2, col = rainbow(16),
main = "2021년도 GDP 세계 16위 국가",
xlab = '국가(nation)', ylab='단위(천달러)', names.arg=nation)
GDP_ranking16
# 단계1 : XML / httr 패키지 설치
install.packages("XML")
install.packages("httr")
library(XML)
library(httr)
# 단계2 : 미국의 주별 1인당 소득 자료 가져오기.
url <- "https://ssti.org/blog/useful-stats-capita-personal-income-state-2010-2015"
get_url <- GET(url)
get_url$content # 16진수로 읽어와서 담는다
rawToChar(get_url$content)
html_cont <- readHTMLTable(rawToChar(get_url$content), stringsAsFactors=F)
class(html_cont) # "list"는 key, value 형태
html_cont <- as.data.frame(html_cont) # data.frame으로 형변환
class(html_cont) # "data.frame"
head(html_cont) # 6개만 표시하겠다.
# 단계4 : 컬럼명을 수정한 후 뒷부분 6개 관측치 보기
names(html_cont) <- c("state","y2010","y2011","y2012","y2013","y2014","y2015")
# 2. 데이터 저장하기
# 2-1. 화면(콘솔) 출력
#  1) cat() 함수
x <- 10
class(html_cont) # "list"는 key, value 형태
# 단계4 : 컬럼명을 수정한 후 뒷부분 6개 관측치 보기
names(html_cont) <- c("state","y2010","y2011","y2012","y2013","y2014","y2015")
install.packages("RSADBE")
library(RSADBE)
data("Severity_Counts") # Severity_Counts 데이터 셋 가져오기 # 출시 전후의 문제점의 개수 등급별로 나눈 것
Severity_Counts
GDP_ranking16_read <- read.table("GDP_ranking16.txt", sep="", header = T)
GDP_ranking16_read
#  3) write.xlsx() 함수 이용 파일 저장 - 엑셀 파일로 저장
library(rJava)
library(xlsx) # excel data 입출력 함수 제공
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studentx.xlsx") # excel 형식으로 저장
write.csv(st.df, "stdf.scv",row.names = F, quote = F)
